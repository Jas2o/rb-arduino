   1               		.file	"Arduino-joystick.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.RingBuffer_Remove.constprop.4,"ax",@progbits
  12               	RingBuffer_Remove.constprop.4:
  13               	.LFB101:
  14               		.file 1 "Lib/LightweightRingBuff.h"
   1:Lib/LightweightRingBuff.h **** /*
   2:Lib/LightweightRingBuff.h ****              LUFA Library
   3:Lib/LightweightRingBuff.h ****      Copyright (C) Dean Camera, 2010.
   4:Lib/LightweightRingBuff.h ****               
   5:Lib/LightweightRingBuff.h ****   dean [at] fourwalledcubicle [dot] com
   6:Lib/LightweightRingBuff.h ****       www.fourwalledcubicle.com
   7:Lib/LightweightRingBuff.h **** */
   8:Lib/LightweightRingBuff.h **** 
   9:Lib/LightweightRingBuff.h **** /*
  10:Lib/LightweightRingBuff.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:Lib/LightweightRingBuff.h **** 
  12:Lib/LightweightRingBuff.h ****   Permission to use, copy, modify, distribute, and sell this 
  13:Lib/LightweightRingBuff.h ****   software and its documentation for any purpose is hereby granted
  14:Lib/LightweightRingBuff.h ****   without fee, provided that the above copyright notice appear in 
  15:Lib/LightweightRingBuff.h ****   all copies and that both that the copyright notice and this
  16:Lib/LightweightRingBuff.h ****   permission notice and warranty disclaimer appear in supporting 
  17:Lib/LightweightRingBuff.h ****   documentation, and that the name of the author not be used in 
  18:Lib/LightweightRingBuff.h ****   advertising or publicity pertaining to distribution of the 
  19:Lib/LightweightRingBuff.h ****   software without specific, written prior permission.
  20:Lib/LightweightRingBuff.h **** 
  21:Lib/LightweightRingBuff.h ****   The author disclaim all warranties with regard to this
  22:Lib/LightweightRingBuff.h ****   software, including all implied warranties of merchantability
  23:Lib/LightweightRingBuff.h ****   and fitness.  In no event shall the author be liable for any
  24:Lib/LightweightRingBuff.h ****   special, indirect or consequential damages or any damages
  25:Lib/LightweightRingBuff.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:Lib/LightweightRingBuff.h ****   in an action of contract, negligence or other tortious action,
  27:Lib/LightweightRingBuff.h ****   arising out of or in connection with the use or performance of
  28:Lib/LightweightRingBuff.h ****   this software.
  29:Lib/LightweightRingBuff.h **** */
  30:Lib/LightweightRingBuff.h **** 
  31:Lib/LightweightRingBuff.h **** /** \file
  32:Lib/LightweightRingBuff.h ****  *
  33:Lib/LightweightRingBuff.h ****  *  Ultra lightweight ring buffer, for fast insertion/deletion.
  34:Lib/LightweightRingBuff.h ****  */
  35:Lib/LightweightRingBuff.h ****  
  36:Lib/LightweightRingBuff.h **** #ifndef _ULW_RING_BUFF_H_
  37:Lib/LightweightRingBuff.h **** #define _ULW_RING_BUFF_H_
  38:Lib/LightweightRingBuff.h **** 
  39:Lib/LightweightRingBuff.h **** 	/* Includes: */
  40:Lib/LightweightRingBuff.h **** 		#include <util/atomic.h>
  41:Lib/LightweightRingBuff.h **** 	
  42:Lib/LightweightRingBuff.h **** 		#include <stdint.h>
  43:Lib/LightweightRingBuff.h **** 		#include <stdbool.h>
  44:Lib/LightweightRingBuff.h **** 
  45:Lib/LightweightRingBuff.h **** 	/* Defines: */
  46:Lib/LightweightRingBuff.h **** 		/** Size of each ring buffer, in data elements - must be between 1 and 255. */
  47:Lib/LightweightRingBuff.h **** 		#define BUFFER_SIZE         128
  48:Lib/LightweightRingBuff.h **** 		
  49:Lib/LightweightRingBuff.h **** 		/** Maximum number of data elements to buffer before forcing a flush. 
  50:Lib/LightweightRingBuff.h **** 		 *  Must be less than BUFFER_SIZE
  51:Lib/LightweightRingBuff.h **** 		 */
  52:Lib/LightweightRingBuff.h **** 		#define BUFFER_NEARLY_FULL	96
  53:Lib/LightweightRingBuff.h **** 		
  54:Lib/LightweightRingBuff.h **** 		/** Type of data to store into the buffer. */
  55:Lib/LightweightRingBuff.h **** 		#define RingBuff_Data_t     uint8_t
  56:Lib/LightweightRingBuff.h **** 
  57:Lib/LightweightRingBuff.h **** 		/** Datatype which may be used to store the count of data stored in a buffer, retrieved
  58:Lib/LightweightRingBuff.h **** 		 *  via a call to \ref RingBuffer_GetCount().
  59:Lib/LightweightRingBuff.h **** 		 */
  60:Lib/LightweightRingBuff.h **** 		#if (BUFFER_SIZE <= 0xFF)
  61:Lib/LightweightRingBuff.h **** 			#define RingBuff_Count_t   uint8_t
  62:Lib/LightweightRingBuff.h **** 		#else
  63:Lib/LightweightRingBuff.h **** 			#define RingBuff_Count_t   uint16_t
  64:Lib/LightweightRingBuff.h **** 		#endif
  65:Lib/LightweightRingBuff.h **** 
  66:Lib/LightweightRingBuff.h **** 	/* Type Defines: */
  67:Lib/LightweightRingBuff.h **** 		/** Type define for a new ring buffer object. Buffers should be initialized via a call to
  68:Lib/LightweightRingBuff.h **** 		 *  \ref RingBuffer_InitBuffer() before use.
  69:Lib/LightweightRingBuff.h **** 		 */
  70:Lib/LightweightRingBuff.h **** 		typedef struct
  71:Lib/LightweightRingBuff.h **** 		{
  72:Lib/LightweightRingBuff.h **** 			RingBuff_Data_t  Buffer[BUFFER_SIZE]; /**< Internal ring buffer data, referenced by the buffer p
  73:Lib/LightweightRingBuff.h **** 			RingBuff_Data_t* In; /**< Current storage location in the circular buffer */
  74:Lib/LightweightRingBuff.h **** 			RingBuff_Data_t* Out; /**< Current retrieval location in the circular buffer */
  75:Lib/LightweightRingBuff.h **** 			RingBuff_Count_t Count;
  76:Lib/LightweightRingBuff.h **** 		} RingBuff_t;
  77:Lib/LightweightRingBuff.h **** 	
  78:Lib/LightweightRingBuff.h **** 	/* Inline Functions: */
  79:Lib/LightweightRingBuff.h **** 		/** Initializes a ring buffer ready for use. Buffers must be initialized via this function
  80:Lib/LightweightRingBuff.h **** 		 *  before any operations are called upon them. Already initialized buffers may be reset
  81:Lib/LightweightRingBuff.h **** 		 *  by re-initializing them using this function.
  82:Lib/LightweightRingBuff.h **** 		 *
  83:Lib/LightweightRingBuff.h **** 		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
  84:Lib/LightweightRingBuff.h **** 		 */
  85:Lib/LightweightRingBuff.h **** 		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
  86:Lib/LightweightRingBuff.h **** 		{
  87:Lib/LightweightRingBuff.h **** 			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
  88:Lib/LightweightRingBuff.h **** 			{
  89:Lib/LightweightRingBuff.h **** 				Buffer->In  = Buffer->Buffer;
  90:Lib/LightweightRingBuff.h **** 				Buffer->Out = Buffer->Buffer;
  91:Lib/LightweightRingBuff.h **** 			}
  92:Lib/LightweightRingBuff.h **** 		}
  93:Lib/LightweightRingBuff.h **** 		
  94:Lib/LightweightRingBuff.h **** 		/** Retrieves the minimum number of bytes stored in a particular buffer. This value is computed
  95:Lib/LightweightRingBuff.h **** 		 *  by entering an atomic lock on the buffer while the IN and OUT locations are fetched, so that
  96:Lib/LightweightRingBuff.h **** 		 *  the buffer cannot be modified while the computation takes place. This value should be cached
  97:Lib/LightweightRingBuff.h **** 		 *  when reading out the contents of the buffer, so that as small a time as possible is spent
  98:Lib/LightweightRingBuff.h **** 		 *  in an atomic lock.
  99:Lib/LightweightRingBuff.h **** 		 *
 100:Lib/LightweightRingBuff.h **** 		 *  \note The value returned by this function is guaranteed to only be the minimum number of byte
 101:Lib/LightweightRingBuff.h **** 		 *        stored in the given buffer; this value may change as other threads write new data and s
 102:Lib/LightweightRingBuff.h **** 		 *        the returned number should be used only to determine how many successive reads may safe
 103:Lib/LightweightRingBuff.h **** 		 *        be performed on the buffer.
 104:Lib/LightweightRingBuff.h **** 		 *
 105:Lib/LightweightRingBuff.h **** 		 *  \param[in] Buffer  Pointer to a ring buffer structure whose count is to be computed
 106:Lib/LightweightRingBuff.h **** 		 */
 107:Lib/LightweightRingBuff.h **** 		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
 108:Lib/LightweightRingBuff.h **** 		{
 109:Lib/LightweightRingBuff.h **** 			RingBuff_Count_t Count;
 110:Lib/LightweightRingBuff.h **** 			
 111:Lib/LightweightRingBuff.h **** 			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 112:Lib/LightweightRingBuff.h **** 			{
 113:Lib/LightweightRingBuff.h **** 				Count = Buffer->Count;
 114:Lib/LightweightRingBuff.h **** 			}
 115:Lib/LightweightRingBuff.h **** 			
 116:Lib/LightweightRingBuff.h **** 			return Count;
 117:Lib/LightweightRingBuff.h **** 		}
 118:Lib/LightweightRingBuff.h **** 		
 119:Lib/LightweightRingBuff.h **** 		/** Atomically determines if the specified ring buffer contains any free space. This should
 120:Lib/LightweightRingBuff.h **** 		 *  be tested before storing data to the buffer, to ensure that no data is lost due to a
 121:Lib/LightweightRingBuff.h **** 		 *  buffer overrun.
 122:Lib/LightweightRingBuff.h **** 		 *
 123:Lib/LightweightRingBuff.h **** 		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to insert into
 124:Lib/LightweightRingBuff.h **** 		 *
 125:Lib/LightweightRingBuff.h **** 		 *  \return Boolean true if the buffer contains no free space, false otherwise
 126:Lib/LightweightRingBuff.h **** 		 */		 
 127:Lib/LightweightRingBuff.h **** 		static inline bool RingBuffer_IsFull(RingBuff_t* const Buffer)
 128:Lib/LightweightRingBuff.h **** 		{
 129:Lib/LightweightRingBuff.h **** 			return (RingBuffer_GetCount(Buffer) == BUFFER_SIZE);
 130:Lib/LightweightRingBuff.h **** 		}
 131:Lib/LightweightRingBuff.h **** 
 132:Lib/LightweightRingBuff.h **** 		/** Atomically determines if the specified ring buffer contains any data. This should
 133:Lib/LightweightRingBuff.h **** 		 *  be tested before removing data from the buffer, to ensure that the buffer does not
 134:Lib/LightweightRingBuff.h **** 		 *  underflow.
 135:Lib/LightweightRingBuff.h **** 		 *
 136:Lib/LightweightRingBuff.h **** 		 *  If the data is to be removed in a loop, store the total number of bytes stored in the
 137:Lib/LightweightRingBuff.h **** 		 *  buffer (via a call to the \ref RingBuffer_GetCount() function) in a temporary variable
 138:Lib/LightweightRingBuff.h **** 		 *  to reduce the time spent in atomicity locks.
 139:Lib/LightweightRingBuff.h **** 		 *
 140:Lib/LightweightRingBuff.h **** 		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to insert into
 141:Lib/LightweightRingBuff.h **** 		 *
 142:Lib/LightweightRingBuff.h **** 		 *  \return Boolean true if the buffer contains no free space, false otherwise
 143:Lib/LightweightRingBuff.h **** 		 */		 
 144:Lib/LightweightRingBuff.h **** 		static inline bool RingBuffer_IsEmpty(RingBuff_t* const Buffer)
 145:Lib/LightweightRingBuff.h **** 		{
 146:Lib/LightweightRingBuff.h **** 			return (RingBuffer_GetCount(Buffer) == 0);
 147:Lib/LightweightRingBuff.h **** 		}
 148:Lib/LightweightRingBuff.h **** 
 149:Lib/LightweightRingBuff.h **** 		/** Inserts an element into the ring buffer.
 150:Lib/LightweightRingBuff.h **** 		 *
 151:Lib/LightweightRingBuff.h **** 		 *  \note Only one execution thread (main program thread or an ISR) may insert into a single buff
 152:Lib/LightweightRingBuff.h **** 		 *        otherwise data corruption may occur. Insertion and removal may occur from different exe
 153:Lib/LightweightRingBuff.h **** 		 *        threads.
 154:Lib/LightweightRingBuff.h **** 		 *
 155:Lib/LightweightRingBuff.h **** 		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to insert into
 156:Lib/LightweightRingBuff.h **** 		 *  \param[in]     Data    Data element to insert into the buffer
 157:Lib/LightweightRingBuff.h **** 		 */
 158:Lib/LightweightRingBuff.h **** 		static inline void RingBuffer_Insert(RingBuff_t* const Buffer,
 159:Lib/LightweightRingBuff.h **** 		                                     const RingBuff_Data_t Data)
 160:Lib/LightweightRingBuff.h **** 		{
 161:Lib/LightweightRingBuff.h **** 			*Buffer->In = Data;
 162:Lib/LightweightRingBuff.h **** 			
 163:Lib/LightweightRingBuff.h **** 			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
 164:Lib/LightweightRingBuff.h **** 			  Buffer->In = Buffer->Buffer;
 165:Lib/LightweightRingBuff.h **** 
 166:Lib/LightweightRingBuff.h **** 			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 167:Lib/LightweightRingBuff.h **** 			{
 168:Lib/LightweightRingBuff.h **** 				Buffer->Count++;
 169:Lib/LightweightRingBuff.h **** 			}
 170:Lib/LightweightRingBuff.h **** 		}
 171:Lib/LightweightRingBuff.h **** 
 172:Lib/LightweightRingBuff.h **** 		/** Removes an element from the ring buffer.
 173:Lib/LightweightRingBuff.h **** 		 *
 174:Lib/LightweightRingBuff.h **** 		 *  \note Only one execution thread (main program thread or an ISR) may remove from a single buff
 175:Lib/LightweightRingBuff.h **** 		 *        otherwise data corruption may occur. Insertion and removal may occur from different exe
 176:Lib/LightweightRingBuff.h **** 		 *        threads.
 177:Lib/LightweightRingBuff.h **** 		 *
 178:Lib/LightweightRingBuff.h **** 		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to retrieve from
 179:Lib/LightweightRingBuff.h **** 		 *
 180:Lib/LightweightRingBuff.h **** 		 *  \return Next data element stored in the buffer
 181:Lib/LightweightRingBuff.h **** 		 */
 182:Lib/LightweightRingBuff.h **** 		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
  15               		.loc 1 182 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  21               	.LVL0:
 183:Lib/LightweightRingBuff.h **** 		{
 184:Lib/LightweightRingBuff.h **** 			RingBuff_Data_t Data = *Buffer->Out;
  22               		.loc 1 184 0
  23 0000 E091 0000 		lds r30,USARTtoUSB_Buffer+130
  24 0004 F091 0000 		lds r31,USARTtoUSB_Buffer+130+1
  25 0008 8191      		ld r24,Z+
  26               	.LVL1:
 185:Lib/LightweightRingBuff.h **** 			
 186:Lib/LightweightRingBuff.h **** 			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
  27               		.loc 1 186 0
  28 000a F093 0000 		sts USARTtoUSB_Buffer+130+1,r31
  29 000e E093 0000 		sts USARTtoUSB_Buffer+130,r30
  30 0012 E050      		subi r30,lo8(USARTtoUSB_Buffer+128)
  31 0014 F040      		sbci r31,hi8(USARTtoUSB_Buffer+128)
  32 0016 01F4      		brne .L2
 187:Lib/LightweightRingBuff.h **** 			  Buffer->Out = Buffer->Buffer;
  33               		.loc 1 187 0
  34 0018 20E0      		ldi r18,lo8(USARTtoUSB_Buffer)
  35 001a 30E0      		ldi r19,hi8(USARTtoUSB_Buffer)
  36 001c 3093 0000 		sts USARTtoUSB_Buffer+130+1,r19
  37 0020 2093 0000 		sts USARTtoUSB_Buffer+130,r18
  38               	.L2:
  39               	.LBB46:
 188:Lib/LightweightRingBuff.h **** 
 189:Lib/LightweightRingBuff.h **** 			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
  40               		.loc 1 189 0
  41 0024 2FB7      		in r18,__SREG__
  42               	.LVL2:
  43               	.LBB47:
  44               	.LBB48:
  45               		.file 2 "/usr/lib/avr/include/util/atomic.h"
   1:/usr/lib/avr/include/util/atomic.h **** /* Copyright (c) 2007 Dean Camera
   2:/usr/lib/avr/include/util/atomic.h ****    All rights reserved.
   3:/usr/lib/avr/include/util/atomic.h **** 
   4:/usr/lib/avr/include/util/atomic.h ****    Redistribution and use in source and binary forms, with or without
   5:/usr/lib/avr/include/util/atomic.h ****    modification, are permitted provided that the following conditions are met:
   6:/usr/lib/avr/include/util/atomic.h **** 
   7:/usr/lib/avr/include/util/atomic.h ****    * Redistributions of source code must retain the above copyright
   8:/usr/lib/avr/include/util/atomic.h ****      notice, this list of conditions and the following disclaimer.
   9:/usr/lib/avr/include/util/atomic.h **** 
  10:/usr/lib/avr/include/util/atomic.h ****    * Redistributions in binary form must reproduce the above copyright
  11:/usr/lib/avr/include/util/atomic.h ****      notice, this list of conditions and the following disclaimer in
  12:/usr/lib/avr/include/util/atomic.h ****      the documentation and/or other materials provided with the
  13:/usr/lib/avr/include/util/atomic.h ****      distribution.
  14:/usr/lib/avr/include/util/atomic.h **** 
  15:/usr/lib/avr/include/util/atomic.h ****    * Neither the name of the copyright holders nor the names of
  16:/usr/lib/avr/include/util/atomic.h ****      contributors may be used to endorse or promote products derived
  17:/usr/lib/avr/include/util/atomic.h ****      from this software without specific prior written permission.
  18:/usr/lib/avr/include/util/atomic.h **** 
  19:/usr/lib/avr/include/util/atomic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  20:/usr/lib/avr/include/util/atomic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  21:/usr/lib/avr/include/util/atomic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  22:/usr/lib/avr/include/util/atomic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  23:/usr/lib/avr/include/util/atomic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  24:/usr/lib/avr/include/util/atomic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  25:/usr/lib/avr/include/util/atomic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  26:/usr/lib/avr/include/util/atomic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  27:/usr/lib/avr/include/util/atomic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  28:/usr/lib/avr/include/util/atomic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  29:/usr/lib/avr/include/util/atomic.h ****   POSSIBILITY OF SUCH DAMAGE.
  30:/usr/lib/avr/include/util/atomic.h **** */
  31:/usr/lib/avr/include/util/atomic.h **** 
  32:/usr/lib/avr/include/util/atomic.h **** /* $Id$ */
  33:/usr/lib/avr/include/util/atomic.h **** 
  34:/usr/lib/avr/include/util/atomic.h **** #ifndef _UTIL_ATOMIC_H_
  35:/usr/lib/avr/include/util/atomic.h **** #define _UTIL_ATOMIC_H_ 1
  36:/usr/lib/avr/include/util/atomic.h **** 
  37:/usr/lib/avr/include/util/atomic.h **** #include <avr/io.h>
  38:/usr/lib/avr/include/util/atomic.h **** #include <avr/interrupt.h>
  39:/usr/lib/avr/include/util/atomic.h **** 
  40:/usr/lib/avr/include/util/atomic.h **** #if !defined(__DOXYGEN__)
  41:/usr/lib/avr/include/util/atomic.h **** /* Internal helper functions. */
  42:/usr/lib/avr/include/util/atomic.h **** static __inline__ uint8_t __iSeiRetVal(void)
  43:/usr/lib/avr/include/util/atomic.h **** {
  44:/usr/lib/avr/include/util/atomic.h ****     sei();
  45:/usr/lib/avr/include/util/atomic.h ****     return 1;
  46:/usr/lib/avr/include/util/atomic.h **** }
  47:/usr/lib/avr/include/util/atomic.h **** 
  48:/usr/lib/avr/include/util/atomic.h **** static __inline__ uint8_t __iCliRetVal(void)
  49:/usr/lib/avr/include/util/atomic.h **** {
  50:/usr/lib/avr/include/util/atomic.h ****     cli();
  46               		.loc 2 50 0
  47               	/* #APP */
  48               	 ;  50 "/usr/lib/avr/include/util/atomic.h" 1
  49 0026 F894      		cli
  50               	 ;  0 "" 2
  51               	.LVL3:
  52               	/* #NOAPP */
  53               	.LBE48:
  54               	.LBE47:
 190:Lib/LightweightRingBuff.h **** 			{
 191:Lib/LightweightRingBuff.h **** 				Buffer->Count--;
  55               		.loc 1 191 0
  56 0028 9091 0000 		lds r25,USARTtoUSB_Buffer+132
  57 002c 9150      		subi r25,lo8(-(-1))
  58 002e 9093 0000 		sts USARTtoUSB_Buffer+132,r25
  59               	.LVL4:
  60               	.LBB49:
  61               	.LBB50:
  51:/usr/lib/avr/include/util/atomic.h ****     return 1;
  52:/usr/lib/avr/include/util/atomic.h **** }
  53:/usr/lib/avr/include/util/atomic.h **** 
  54:/usr/lib/avr/include/util/atomic.h **** static __inline__ void __iSeiParam(const uint8_t *__s)
  55:/usr/lib/avr/include/util/atomic.h **** {
  56:/usr/lib/avr/include/util/atomic.h ****     sei();
  57:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
  58:/usr/lib/avr/include/util/atomic.h ****     (void)__s;
  59:/usr/lib/avr/include/util/atomic.h **** }
  60:/usr/lib/avr/include/util/atomic.h **** 
  61:/usr/lib/avr/include/util/atomic.h **** static __inline__ void __iCliParam(const uint8_t *__s)
  62:/usr/lib/avr/include/util/atomic.h **** {
  63:/usr/lib/avr/include/util/atomic.h ****     cli();
  64:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
  65:/usr/lib/avr/include/util/atomic.h ****     (void)__s;
  66:/usr/lib/avr/include/util/atomic.h **** }
  67:/usr/lib/avr/include/util/atomic.h **** 
  68:/usr/lib/avr/include/util/atomic.h **** static __inline__ void __iRestore(const  uint8_t *__s)
  69:/usr/lib/avr/include/util/atomic.h **** {
  70:/usr/lib/avr/include/util/atomic.h ****     SREG = *__s;
  62               		.loc 2 70 0
  63 0032 2FBF      		out __SREG__,r18
  71:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
  64               		.loc 2 71 0
  65               	.LBE50:
  66               	.LBE49:
  67               	.LBE46:
 192:Lib/LightweightRingBuff.h **** 			}
 193:Lib/LightweightRingBuff.h **** 			
 194:Lib/LightweightRingBuff.h **** 			return Data;
 195:Lib/LightweightRingBuff.h **** 		}
  68               		.loc 1 195 0
  69 0034 0895      		ret
  70               		.cfi_endproc
  71               	.LFE101:
  73               		.section	.text.SetupHardware,"ax",@progbits
  74               	.global	SetupHardware
  76               	SetupHardware:
  77               	.LFB87:
  78               		.file 3 "Arduino-joystick.c"
   1:Arduino-joystick.c **** /*
   2:Arduino-joystick.c ****              LUFA Library
   3:Arduino-joystick.c ****      Copyright (C) Dean Camera, 2010.
   4:Arduino-joystick.c ****               
   5:Arduino-joystick.c ****   dean [at] fourwalledcubicle [dot] com
   6:Arduino-joystick.c ****       www.fourwalledcubicle.com
   7:Arduino-joystick.c **** */
   8:Arduino-joystick.c **** 
   9:Arduino-joystick.c **** /*
  10:Arduino-joystick.c ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:Arduino-joystick.c **** 
  12:Arduino-joystick.c ****   Permission to use, copy, modify, distribute, and sell this 
  13:Arduino-joystick.c ****   software and its documentation for any purpose is hereby granted
  14:Arduino-joystick.c ****   without fee, provided that the above copyright notice appear in 
  15:Arduino-joystick.c ****   all copies and that both that the copyright notice and this
  16:Arduino-joystick.c ****   permission notice and warranty disclaimer appear in supporting 
  17:Arduino-joystick.c ****   documentation, and that the name of the author not be used in 
  18:Arduino-joystick.c ****   advertising or publicity pertaining to distribution of the 
  19:Arduino-joystick.c ****   software without specific, written prior permission.
  20:Arduino-joystick.c **** 
  21:Arduino-joystick.c ****   The author disclaim all warranties with regard to this
  22:Arduino-joystick.c ****   software, including all implied warranties of merchantability
  23:Arduino-joystick.c ****   and fitness.  In no event shall the author be liable for any
  24:Arduino-joystick.c ****   special, indirect or consequential damages or any damages
  25:Arduino-joystick.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:Arduino-joystick.c ****   in an action of contract, negligence or other tortious action,
  27:Arduino-joystick.c ****   arising out of or in connection with the use or performance of
  28:Arduino-joystick.c ****   this software.
  29:Arduino-joystick.c **** */
  30:Arduino-joystick.c **** 
  31:Arduino-joystick.c **** /*-
  32:Arduino-joystick.c ****  * Copyright (c) 2011 Darran Hunt (darran [at] hunt dot net dot nz)
  33:Arduino-joystick.c ****  * All rights reserved.
  34:Arduino-joystick.c ****  *
  35:Arduino-joystick.c ****  * Redistribution and use in source and binary forms, with or without
  36:Arduino-joystick.c ****  * modification, are permitted provided that the following conditions
  37:Arduino-joystick.c ****  * are met:
  38:Arduino-joystick.c ****  * 1. Redistributions of source code must retain the above copyright
  39:Arduino-joystick.c ****  *    notice, this list of conditions and the following disclaimer.
  40:Arduino-joystick.c ****  * 2. Redistributions in binary form must reproduce the above copyright
  41:Arduino-joystick.c ****  *    notice, this list of conditions and the following disclaimer in the
  42:Arduino-joystick.c ****  *    documentation and/or other materials provided with the distribution.
  43:Arduino-joystick.c ****  *
  44:Arduino-joystick.c ****  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
  45:Arduino-joystick.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
  46:Arduino-joystick.c ****  * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
  47:Arduino-joystick.c ****  * THE CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  48:Arduino-joystick.c ****  * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
  49:Arduino-joystick.c ****  * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
  50:Arduino-joystick.c ****  * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
  51:Arduino-joystick.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
  52:Arduino-joystick.c ****  * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
  53:Arduino-joystick.c ****  * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  54:Arduino-joystick.c ****  */
  55:Arduino-joystick.c **** 
  56:Arduino-joystick.c **** /** \file
  57:Arduino-joystick.c ****  *
  58:Arduino-joystick.c ****  *  Main source file for the Arduino-mouse project. This file contains the main tasks of
  59:Arduino-joystick.c ****  *  the project and is responsible for the initial application hardware configuration.
  60:Arduino-joystick.c ****  */
  61:Arduino-joystick.c **** 
  62:Arduino-joystick.c **** #include "Arduino-joystick.h"
  63:Arduino-joystick.c **** 
  64:Arduino-joystick.c **** /** Buffer to hold the previously generated HID report, for comparison purposes inside the HID clas
  65:Arduino-joystick.c **** uint8_t PrevJoystickHIDReportBuffer[sizeof(USB_JoystickReport_Data_t)];
  66:Arduino-joystick.c **** 
  67:Arduino-joystick.c **** /** LUFA HID Class driver interface configuration and state information. This structure is
  68:Arduino-joystick.c ****  *  passed to all HID Class driver functions, so that multiple instances of the same class
  69:Arduino-joystick.c ****  *  within a device can be differentiated from one another.
  70:Arduino-joystick.c ****  */
  71:Arduino-joystick.c **** USB_ClassInfo_HID_Device_t Joystick_HID_Interface = {
  72:Arduino-joystick.c ****     .Config = {
  73:Arduino-joystick.c **** 	.InterfaceNumber              = 0,
  74:Arduino-joystick.c **** 
  75:Arduino-joystick.c **** 	.ReportINEndpointNumber       = JOYSTICK_EPNUM,
  76:Arduino-joystick.c **** 	.ReportINEndpointSize         = JOYSTICK_EPSIZE,
  77:Arduino-joystick.c **** 	.ReportINEndpointDoubleBank   = false,
  78:Arduino-joystick.c **** 
  79:Arduino-joystick.c **** 	.PrevReportINBuffer           = PrevJoystickHIDReportBuffer,
  80:Arduino-joystick.c **** 	.PrevReportINBufferSize       = sizeof(PrevJoystickHIDReportBuffer),
  81:Arduino-joystick.c ****     },
  82:Arduino-joystick.c **** };
  83:Arduino-joystick.c **** 
  84:Arduino-joystick.c **** 
  85:Arduino-joystick.c **** /** Main program entry point. This routine contains the overall program flow, including initial
  86:Arduino-joystick.c ****  *  setup of all components and the main program loop.
  87:Arduino-joystick.c ****  */
  88:Arduino-joystick.c **** 
  89:Arduino-joystick.c **** /** Circular buffer to hold data from the serial port before it is sent to the host. */
  90:Arduino-joystick.c **** RingBuff_t USARTtoUSB_Buffer;
  91:Arduino-joystick.c **** 
  92:Arduino-joystick.c **** USB_JoystickReport_Data_t joyReport = { 0x00, 0x00, 0x08, 0x80, 0x7F, 0x80, 0x7F, 0x00, 0x00, 0x00,
  93:Arduino-joystick.c **** USB_JoystickReport_Data_t_GetFeature joyReportBack = { 0x21, 0x26, 0x01, 0x06, 0x00, 0x00, 0x00, 0x
  94:Arduino-joystick.c **** 
  95:Arduino-joystick.c **** #define LED_ON_TICKS 2000	/* Number of ticks to leave LEDs on */
  96:Arduino-joystick.c **** volatile int led1_ticks = 0;
  97:Arduino-joystick.c **** 
  98:Arduino-joystick.c **** /** Main program entry point. This routine contains the overall program flow, including initial
  99:Arduino-joystick.c ****  *  setup of all components and the main program loop.
 100:Arduino-joystick.c ****  */
 101:Arduino-joystick.c **** int main(void)
 102:Arduino-joystick.c **** {
 103:Arduino-joystick.c ****     SetupHardware();
 104:Arduino-joystick.c **** 
 105:Arduino-joystick.c ****     RingBuffer_InitBuffer(&USARTtoUSB_Buffer);
 106:Arduino-joystick.c **** 
 107:Arduino-joystick.c ****     sei();
 108:Arduino-joystick.c **** 
 109:Arduino-joystick.c ****     for (;;) {
 110:Arduino-joystick.c **** 	HID_Device_USBTask(&Joystick_HID_Interface);
 111:Arduino-joystick.c **** 	USB_USBTask();
 112:Arduino-joystick.c **** 
 113:Arduino-joystick.c **** 	/* Turn off the Tx LED when the tick count reaches zero */
 114:Arduino-joystick.c **** 	if (led1_ticks) {
 115:Arduino-joystick.c **** 	    led1_ticks--;
 116:Arduino-joystick.c **** 	    if (led1_ticks == 0) {
 117:Arduino-joystick.c **** 		LEDs_TurnOffLEDs(LEDS_LED1);
 118:Arduino-joystick.c **** 	    }
 119:Arduino-joystick.c **** 	}
 120:Arduino-joystick.c ****     }
 121:Arduino-joystick.c **** }
 122:Arduino-joystick.c **** 
 123:Arduino-joystick.c **** /** Configures the board hardware and chip peripherals for the demo's functionality. */
 124:Arduino-joystick.c **** void SetupHardware(void)
 125:Arduino-joystick.c **** {
  79               		.loc 3 125 0
  80               		.cfi_startproc
  81 0000 CF93      		push r28
  82               	.LCFI0:
  83               		.cfi_def_cfa_offset 3
  84               		.cfi_offset 28, -2
  85 0002 DF93      		push r29
  86               	.LCFI1:
  87               		.cfi_def_cfa_offset 4
  88               		.cfi_offset 29, -3
  89               	/* prologue: function */
  90               	/* frame size = 0 */
  91               	/* stack size = 2 */
  92               	.L__stack_usage = 2
 126:Arduino-joystick.c ****     /* Disable watchdog if enabled by bootloader/fuses */
 127:Arduino-joystick.c ****     MCUSR &= ~(1 << WDRF);
  93               		.loc 3 127 0
  94 0004 84B7      		in r24,0x34
  95 0006 877F      		andi r24,lo8(-9)
  96 0008 84BF      		out 0x34,r24
 128:Arduino-joystick.c ****     wdt_disable();
  97               		.loc 3 128 0
  98 000a 88E1      		ldi r24,lo8(24)
  99               	/* #APP */
 100               	 ;  128 "Arduino-joystick.c" 1
 101 000c 0FB6      		in __tmp_reg__, __SREG__
 102 000e F894      		cli
 103 0010 8093 6000 		sts 96, r24
 104 0014 1092 6000 		sts 96, __zero_reg__
 105 0018 0FBE      		out __SREG__,__tmp_reg__
 106               		
 107               	 ;  0 "" 2
 108               	.LVL5:
 109               	/* #NOAPP */
 110               	.LBB55:
 111               	.LBB56:
 112               		.file 4 "../../LUFA/Drivers/Peripheral/Serial.h"
   1:../../LUFA/Drivers/Peripheral/Serial.h **** /*
   2:../../LUFA/Drivers/Peripheral/Serial.h ****              LUFA Library
   3:../../LUFA/Drivers/Peripheral/Serial.h ****      Copyright (C) Dean Camera, 2010.
   4:../../LUFA/Drivers/Peripheral/Serial.h ****               
   5:../../LUFA/Drivers/Peripheral/Serial.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA/Drivers/Peripheral/Serial.h ****       www.fourwalledcubicle.com
   7:../../LUFA/Drivers/Peripheral/Serial.h **** */
   8:../../LUFA/Drivers/Peripheral/Serial.h **** 
   9:../../LUFA/Drivers/Peripheral/Serial.h **** /*
  10:../../LUFA/Drivers/Peripheral/Serial.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA/Drivers/Peripheral/Serial.h **** 
  12:../../LUFA/Drivers/Peripheral/Serial.h ****   Permission to use, copy, modify, distribute, and sell this 
  13:../../LUFA/Drivers/Peripheral/Serial.h ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA/Drivers/Peripheral/Serial.h ****   without fee, provided that the above copyright notice appear in 
  15:../../LUFA/Drivers/Peripheral/Serial.h ****   all copies and that both that the copyright notice and this
  16:../../LUFA/Drivers/Peripheral/Serial.h ****   permission notice and warranty disclaimer appear in supporting 
  17:../../LUFA/Drivers/Peripheral/Serial.h ****   documentation, and that the name of the author not be used in 
  18:../../LUFA/Drivers/Peripheral/Serial.h ****   advertising or publicity pertaining to distribution of the 
  19:../../LUFA/Drivers/Peripheral/Serial.h ****   software without specific, written prior permission.
  20:../../LUFA/Drivers/Peripheral/Serial.h **** 
  21:../../LUFA/Drivers/Peripheral/Serial.h ****   The author disclaim all warranties with regard to this
  22:../../LUFA/Drivers/Peripheral/Serial.h ****   software, including all implied warranties of merchantability
  23:../../LUFA/Drivers/Peripheral/Serial.h ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA/Drivers/Peripheral/Serial.h ****   special, indirect or consequential damages or any damages
  25:../../LUFA/Drivers/Peripheral/Serial.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA/Drivers/Peripheral/Serial.h ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA/Drivers/Peripheral/Serial.h ****   arising out of or in connection with the use or performance of
  28:../../LUFA/Drivers/Peripheral/Serial.h ****   this software.
  29:../../LUFA/Drivers/Peripheral/Serial.h **** */
  30:../../LUFA/Drivers/Peripheral/Serial.h **** 
  31:../../LUFA/Drivers/Peripheral/Serial.h **** /** \file
  32:../../LUFA/Drivers/Peripheral/Serial.h ****  *  \brief Master include file for the USART peripheral driver.
  33:../../LUFA/Drivers/Peripheral/Serial.h ****  *
  34:../../LUFA/Drivers/Peripheral/Serial.h ****  *  Driver for the USART subsystem on supported USB AVRs.
  35:../../LUFA/Drivers/Peripheral/Serial.h ****  */
  36:../../LUFA/Drivers/Peripheral/Serial.h ****  
  37:../../LUFA/Drivers/Peripheral/Serial.h **** /** \ingroup Group_PeripheralDrivers
  38:../../LUFA/Drivers/Peripheral/Serial.h ****  *  @defgroup Group_Serial Serial USART Driver - LUFA/Drivers/Peripheral/Serial.h
  39:../../LUFA/Drivers/Peripheral/Serial.h ****  *
  40:../../LUFA/Drivers/Peripheral/Serial.h ****  *  \section Sec_Dependencies Module Source Dependencies
  41:../../LUFA/Drivers/Peripheral/Serial.h ****  *  The following files must be built with any user project that uses this module:
  42:../../LUFA/Drivers/Peripheral/Serial.h ****  *    - LUFA/Drivers/Peripheral/Serial.c <i>(Makefile source module name: LUFA_SRC_SERIAL)</i>
  43:../../LUFA/Drivers/Peripheral/Serial.h ****  *
  44:../../LUFA/Drivers/Peripheral/Serial.h ****  *  \section Module Description
  45:../../LUFA/Drivers/Peripheral/Serial.h ****  *  Hardware serial USART driver. This module provides an easy to use driver for
  46:../../LUFA/Drivers/Peripheral/Serial.h ****  *  the setup of and transfer of data over the AVR's USART port.
  47:../../LUFA/Drivers/Peripheral/Serial.h ****  *
  48:../../LUFA/Drivers/Peripheral/Serial.h ****  *  @{
  49:../../LUFA/Drivers/Peripheral/Serial.h ****  */
  50:../../LUFA/Drivers/Peripheral/Serial.h ****  
  51:../../LUFA/Drivers/Peripheral/Serial.h **** #ifndef __SERIAL_H__
  52:../../LUFA/Drivers/Peripheral/Serial.h **** #define __SERIAL_H__
  53:../../LUFA/Drivers/Peripheral/Serial.h **** 
  54:../../LUFA/Drivers/Peripheral/Serial.h **** 	/* Includes: */
  55:../../LUFA/Drivers/Peripheral/Serial.h **** 		#include <avr/io.h>
  56:../../LUFA/Drivers/Peripheral/Serial.h **** 		#include <avr/pgmspace.h>
  57:../../LUFA/Drivers/Peripheral/Serial.h **** 		#include <stdbool.h>
  58:../../LUFA/Drivers/Peripheral/Serial.h **** 		
  59:../../LUFA/Drivers/Peripheral/Serial.h **** 		#include "../../Common/Common.h"
  60:../../LUFA/Drivers/Peripheral/Serial.h **** 		#include "../Misc/TerminalCodes.h"
  61:../../LUFA/Drivers/Peripheral/Serial.h **** 
  62:../../LUFA/Drivers/Peripheral/Serial.h **** 	/* Enable C linkage for C++ Compilers: */
  63:../../LUFA/Drivers/Peripheral/Serial.h **** 		#if defined(__cplusplus)
  64:../../LUFA/Drivers/Peripheral/Serial.h **** 			extern "C" {
  65:../../LUFA/Drivers/Peripheral/Serial.h **** 		#endif
  66:../../LUFA/Drivers/Peripheral/Serial.h **** 
  67:../../LUFA/Drivers/Peripheral/Serial.h **** 	/* Public Interface - May be used in end-application: */
  68:../../LUFA/Drivers/Peripheral/Serial.h **** 		/* Macros: */
  69:../../LUFA/Drivers/Peripheral/Serial.h **** 			/** Macro for calculating the baud value from a given baud rate when the U2X (double speed) bit 
  70:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *  not set.
  71:../../LUFA/Drivers/Peripheral/Serial.h **** 			 */
  72:../../LUFA/Drivers/Peripheral/Serial.h **** 			#define SERIAL_UBBRVAL(baud)    ((((F_CPU / 16) + (baud / 2)) / (baud)) - 1)
  73:../../LUFA/Drivers/Peripheral/Serial.h **** 
  74:../../LUFA/Drivers/Peripheral/Serial.h **** 			/** Macro for calculating the baud value from a given baud rate when the U2X (double speed) bit 
  75:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *  set.
  76:../../LUFA/Drivers/Peripheral/Serial.h **** 			 */
  77:../../LUFA/Drivers/Peripheral/Serial.h **** 			#define SERIAL_2X_UBBRVAL(baud) ((((F_CPU / 8) + (baud / 2)) / (baud)) - 1)
  78:../../LUFA/Drivers/Peripheral/Serial.h **** 
  79:../../LUFA/Drivers/Peripheral/Serial.h **** 		/* Function Prototypes: */
  80:../../LUFA/Drivers/Peripheral/Serial.h **** 			/** Transmits a given string located in program space (FLASH) through the USART.
  81:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *
  82:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *  \param[in] FlashStringPtr  Pointer to a string located in program space.
  83:../../LUFA/Drivers/Peripheral/Serial.h **** 			 */
  84:../../LUFA/Drivers/Peripheral/Serial.h **** 			void Serial_TxString_P(const char* FlashStringPtr) ATTR_NON_NULL_PTR_ARG(1);
  85:../../LUFA/Drivers/Peripheral/Serial.h **** 
  86:../../LUFA/Drivers/Peripheral/Serial.h **** 			/** Transmits a given string located in SRAM memory through the USART.
  87:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *
  88:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *  \param[in] StringPtr  Pointer to a string located in SRAM space.
  89:../../LUFA/Drivers/Peripheral/Serial.h **** 			 */
  90:../../LUFA/Drivers/Peripheral/Serial.h **** 			void Serial_TxString(const char* StringPtr) ATTR_NON_NULL_PTR_ARG(1);
  91:../../LUFA/Drivers/Peripheral/Serial.h **** 
  92:../../LUFA/Drivers/Peripheral/Serial.h **** 		/* Inline Functions: */
  93:../../LUFA/Drivers/Peripheral/Serial.h **** 			/** Initializes the USART, ready for serial data transmission and reception. This initializes th
  94:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *  standard 8-bit, no parity, 1 stop bit settings suitable for most applications.
  95:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *
  96:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *  \param[in] BaudRate     Serial baud rate, in bits per second.
  97:../../LUFA/Drivers/Peripheral/Serial.h **** 			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to doubl
  98:../../LUFA/Drivers/Peripheral/Serial.h **** 			 */
  99:../../LUFA/Drivers/Peripheral/Serial.h **** 			static inline void Serial_Init(const uint32_t BaudRate,
 100:../../LUFA/Drivers/Peripheral/Serial.h **** 			                               const bool DoubleSpeed)
 101:../../LUFA/Drivers/Peripheral/Serial.h **** 			{
 102:../../LUFA/Drivers/Peripheral/Serial.h **** 				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
 113               		.loc 4 102 0
 114 001a 80E1      		ldi r24,lo8(16)
 115 001c 90E0      		ldi r25,0
 116 001e 9093 CD00 		sts 204+1,r25
 117 0022 8093 CC00 		sts 204,r24
 103:../../LUFA/Drivers/Peripheral/Serial.h **** 
 104:../../LUFA/Drivers/Peripheral/Serial.h **** 				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
 118               		.loc 4 104 0
 119 0026 86E0      		ldi r24,lo8(6)
 120 0028 8093 CA00 		sts 202,r24
 105:../../LUFA/Drivers/Peripheral/Serial.h **** 				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
 121               		.loc 4 105 0
 122 002c 82E0      		ldi r24,lo8(2)
 123 002e 8093 C800 		sts 200,r24
 106:../../LUFA/Drivers/Peripheral/Serial.h **** 				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
 124               		.loc 4 106 0
 125 0032 C9EC      		ldi r28,lo8(-55)
 126 0034 D0E0      		ldi r29,0
 127 0036 88E1      		ldi r24,lo8(24)
 128 0038 8883      		st Y,r24
 107:../../LUFA/Drivers/Peripheral/Serial.h **** 				
 108:../../LUFA/Drivers/Peripheral/Serial.h **** 				DDRD  |= (1 << 3);
 129               		.loc 4 108 0
 130 003a 539A      		sbi 0xa,3
 109:../../LUFA/Drivers/Peripheral/Serial.h **** 				PORTD |= (1 << 2);
 131               		.loc 4 109 0
 132 003c 5A9A      		sbi 0xb,2
 133               	.LBE56:
 134               	.LBE55:
 135               	.LBB57:
 136               	.LBB58:
 137               		.file 5 "./Board/LEDs.h"
   1:./Board/LEDs.h **** /*
   2:./Board/LEDs.h ****              LUFA Library
   3:./Board/LEDs.h ****      Copyright (C) Dean Camera, 2010.
   4:./Board/LEDs.h ****               
   5:./Board/LEDs.h ****   dean [at] fourwalledcubicle [dot] com
   6:./Board/LEDs.h ****       www.fourwalledcubicle.com
   7:./Board/LEDs.h **** */
   8:./Board/LEDs.h **** 
   9:./Board/LEDs.h **** /*
  10:./Board/LEDs.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:./Board/LEDs.h **** 
  12:./Board/LEDs.h ****   Permission to use, copy, modify, distribute, and sell this 
  13:./Board/LEDs.h ****   software and its documentation for any purpose is hereby granted
  14:./Board/LEDs.h ****   without fee, provided that the above copyright notice appear in 
  15:./Board/LEDs.h ****   all copies and that both that the copyright notice and this
  16:./Board/LEDs.h ****   permission notice and warranty disclaimer appear in supporting 
  17:./Board/LEDs.h ****   documentation, and that the name of the author not be used in 
  18:./Board/LEDs.h ****   advertising or publicity pertaining to distribution of the 
  19:./Board/LEDs.h ****   software without specific, written prior permission.
  20:./Board/LEDs.h **** 
  21:./Board/LEDs.h ****   The author disclaim all warranties with regard to this
  22:./Board/LEDs.h ****   software, including all implied warranties of merchantability
  23:./Board/LEDs.h ****   and fitness.  In no event shall the author be liable for any
  24:./Board/LEDs.h ****   special, indirect or consequential damages or any damages
  25:./Board/LEDs.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:./Board/LEDs.h ****   in an action of contract, negligence or other tortious action,
  27:./Board/LEDs.h ****   arising out of or in connection with the use or performance of
  28:./Board/LEDs.h ****   this software.
  29:./Board/LEDs.h **** */
  30:./Board/LEDs.h **** 
  31:./Board/LEDs.h **** /*
  32:./Board/LEDs.h ****    Board LEDs driver for the Benito board, from www.dorkbotpdx.org.
  33:./Board/LEDs.h **** */
  34:./Board/LEDs.h **** 
  35:./Board/LEDs.h **** #ifndef __LEDS_ARDUINOUNO_H__
  36:./Board/LEDs.h **** #define __LEDS_ARDUINOUNO_H__
  37:./Board/LEDs.h **** 
  38:./Board/LEDs.h **** 	/* Includes: */
  39:./Board/LEDs.h **** 		#include <avr/io.h>
  40:./Board/LEDs.h **** 
  41:./Board/LEDs.h **** /* Enable C linkage for C++ Compilers: */
  42:./Board/LEDs.h **** 		#if defined(__cplusplus)
  43:./Board/LEDs.h **** 			extern "C" {
  44:./Board/LEDs.h **** 		#endif
  45:./Board/LEDs.h **** 
  46:./Board/LEDs.h **** 	/* Preprocessor Checks: */
  47:./Board/LEDs.h **** 		#if !defined(INCLUDE_FROM_LEDS_H)
  48:./Board/LEDs.h **** 			#error Do not include this file directly. Include LUFA/Drivers/Board/LEDS.h instead.
  49:./Board/LEDs.h **** 		#endif
  50:./Board/LEDs.h **** 
  51:./Board/LEDs.h **** 	/* Public Interface - May be used in end-application: */
  52:./Board/LEDs.h **** 		/* Macros: */
  53:./Board/LEDs.h **** 			/** LED mask for the first LED on the board. */
  54:./Board/LEDs.h **** 			#define LEDS_LED1        (1 << 5)
  55:./Board/LEDs.h **** 
  56:./Board/LEDs.h **** 			/** LED mask for the second LED on the board. */
  57:./Board/LEDs.h **** 			#define LEDS_LED2        (1 << 4)
  58:./Board/LEDs.h **** 
  59:./Board/LEDs.h **** 			/** LED mask for all the LEDs on the board. */
  60:./Board/LEDs.h **** 			#define LEDS_ALL_LEDS    (LEDS_LED1 | LEDS_LED2)
  61:./Board/LEDs.h **** 
  62:./Board/LEDs.h **** 			/** LED mask for the none of the board LEDs */
  63:./Board/LEDs.h **** 			#define LEDS_NO_LEDS     0
  64:./Board/LEDs.h **** 
  65:./Board/LEDs.h **** 		/* Inline Functions: */
  66:./Board/LEDs.h **** 		#if !defined(__DOXYGEN__)
  67:./Board/LEDs.h **** 			static inline void LEDs_Init(void)
  68:./Board/LEDs.h **** 			{
  69:./Board/LEDs.h **** 				DDRD  |= LEDS_ALL_LEDS;
 138               		.loc 5 69 0
 139 003e 8AB1      		in r24,0xa
 140 0040 8063      		ori r24,lo8(48)
 141 0042 8AB9      		out 0xa,r24
  70:./Board/LEDs.h **** 				PORTD |= LEDS_ALL_LEDS;
 142               		.loc 5 70 0
 143 0044 8BB1      		in r24,0xb
 144 0046 8063      		ori r24,lo8(48)
 145 0048 8BB9      		out 0xb,r24
 146               	.LBE58:
 147               	.LBE57:
 129:Arduino-joystick.c **** 
 130:Arduino-joystick.c ****     /* Hardware Initialization */
 131:Arduino-joystick.c ****     Serial_Init(115200, true);
 132:Arduino-joystick.c ****     LEDs_Init();
 133:Arduino-joystick.c ****     USB_Init();
 148               		.loc 3 133 0
 149 004a 0E94 0000 		call USB_Init
 150               	.LVL6:
 134:Arduino-joystick.c **** 
 135:Arduino-joystick.c ****     UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
 151               		.loc 3 135 0
 152 004e 88E9      		ldi r24,lo8(-104)
 153 0050 8883      		st Y,r24
 154               	/* epilogue start */
 136:Arduino-joystick.c **** }
 155               		.loc 3 136 0
 156 0052 DF91      		pop r29
 157 0054 CF91      		pop r28
 158 0056 0895      		ret
 159               		.cfi_endproc
 160               	.LFE87:
 162               		.section	.text.startup.main,"ax",@progbits
 163               	.global	main
 165               	main:
 166               	.LFB86:
 102:Arduino-joystick.c ****     SetupHardware();
 167               		.loc 3 102 0
 168               		.cfi_startproc
 169               	/* prologue: function */
 170               	/* frame size = 0 */
 171               	/* stack size = 0 */
 172               	.L__stack_usage = 0
 103:Arduino-joystick.c **** 
 173               		.loc 3 103 0
 174 0000 0E94 0000 		call SetupHardware
 175               	.LVL7:
 176               	.LBB68:
 177               	.LBB69:
  87:Lib/LightweightRingBuff.h **** 			{
 178               		.loc 1 87 0
 179 0004 2FB7      		in r18,__SREG__
 180               	.LVL8:
 181               	.LBB70:
 182               	.LBB71:
  50:/usr/lib/avr/include/util/atomic.h ****     return 1;
 183               		.loc 2 50 0
 184               	/* #APP */
 185               	 ;  50 "/usr/lib/avr/include/util/atomic.h" 1
 186 0006 F894      		cli
 187               	 ;  0 "" 2
 188               	.LVL9:
 189               	/* #NOAPP */
 190               	.LBE71:
 191               	.LBE70:
  89:Lib/LightweightRingBuff.h **** 				Buffer->Out = Buffer->Buffer;
 192               		.loc 1 89 0
 193 0008 80E0      		ldi r24,lo8(USARTtoUSB_Buffer)
 194 000a 90E0      		ldi r25,hi8(USARTtoUSB_Buffer)
 195 000c 9093 0000 		sts USARTtoUSB_Buffer+128+1,r25
 196 0010 8093 0000 		sts USARTtoUSB_Buffer+128,r24
  90:Lib/LightweightRingBuff.h **** 			}
 197               		.loc 1 90 0
 198 0014 9093 0000 		sts USARTtoUSB_Buffer+130+1,r25
 199 0018 8093 0000 		sts USARTtoUSB_Buffer+130,r24
 200               	.LVL10:
 201               	.LBB72:
 202               	.LBB73:
  70:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 203               		.loc 2 70 0
 204 001c 2FBF      		out __SREG__,r18
 205               		.loc 2 71 0
 206               	.LBE73:
 207               	.LBE72:
 208               	.LBE69:
 209               	.LBE68:
 107:Arduino-joystick.c **** 
 210               		.loc 3 107 0
 211               	/* #APP */
 212               	 ;  107 "Arduino-joystick.c" 1
 213 001e 7894      		sei
 214               	 ;  0 "" 2
 215               	.LVL11:
 216               	/* #NOAPP */
 217               	.L7:
 110:Arduino-joystick.c **** 	USB_USBTask();
 218               		.loc 3 110 0
 219 0020 80E0      		ldi r24,lo8(Joystick_HID_Interface)
 220 0022 90E0      		ldi r25,hi8(Joystick_HID_Interface)
 221 0024 0E94 0000 		call HID_Device_USBTask
 222               	.LVL12:
 111:Arduino-joystick.c **** 
 223               		.loc 3 111 0
 224 0028 0E94 0000 		call USB_USBTask
 225               	.LVL13:
 114:Arduino-joystick.c **** 	    led1_ticks--;
 226               		.loc 3 114 0
 227 002c 8091 0000 		lds r24,led1_ticks
 228 0030 9091 0000 		lds r25,led1_ticks+1
 229 0034 892B      		or r24,r25
 230 0036 01F0      		breq .L7
 115:Arduino-joystick.c **** 	    if (led1_ticks == 0) {
 231               		.loc 3 115 0
 232 0038 8091 0000 		lds r24,led1_ticks
 233 003c 9091 0000 		lds r25,led1_ticks+1
 234 0040 0197      		sbiw r24,1
 235 0042 9093 0000 		sts led1_ticks+1,r25
 236 0046 8093 0000 		sts led1_ticks,r24
 116:Arduino-joystick.c **** 		LEDs_TurnOffLEDs(LEDS_LED1);
 237               		.loc 3 116 0
 238 004a 8091 0000 		lds r24,led1_ticks
 239 004e 9091 0000 		lds r25,led1_ticks+1
 240 0052 892B      		or r24,r25
 241 0054 01F4      		brne .L7
 242               	.LVL14:
 243               	.LBB74:
 244               	.LBB75:
  71:./Board/LEDs.h **** 			}
  72:./Board/LEDs.h **** 			
  73:./Board/LEDs.h **** 			static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
  74:./Board/LEDs.h **** 			{
  75:./Board/LEDs.h **** 				PORTD &= ~LEDMask;
  76:./Board/LEDs.h **** 			}
  77:./Board/LEDs.h **** 
  78:./Board/LEDs.h **** 			static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
  79:./Board/LEDs.h **** 			{
  80:./Board/LEDs.h **** 				PORTD |= LEDMask;
 245               		.loc 5 80 0
 246 0056 5D9A      		sbi 0xb,5
 247 0058 00C0      		rjmp .L7
 248               	.LBE75:
 249               	.LBE74:
 250               		.cfi_endproc
 251               	.LFE86:
 253               		.section	.text.EVENT_USB_Device_Connect,"ax",@progbits
 254               	.global	EVENT_USB_Device_Connect
 256               	EVENT_USB_Device_Connect:
 257               	.LFB88:
 137:Arduino-joystick.c **** 
 138:Arduino-joystick.c **** /** Event handler for the library USB Connection event. */
 139:Arduino-joystick.c **** void EVENT_USB_Device_Connect(void)
 140:Arduino-joystick.c **** {
 258               		.loc 3 140 0
 259               		.cfi_startproc
 260               	/* prologue: function */
 261               	/* frame size = 0 */
 262               	/* stack size = 0 */
 263               	.L__stack_usage = 0
 264 0000 0895      		ret
 265               		.cfi_endproc
 266               	.LFE88:
 268               		.section	.text.EVENT_USB_Device_Disconnect,"ax",@progbits
 269               	.global	EVENT_USB_Device_Disconnect
 271               	EVENT_USB_Device_Disconnect:
 272               	.LFB89:
 141:Arduino-joystick.c **** 	//LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
 142:Arduino-joystick.c **** }
 143:Arduino-joystick.c **** 
 144:Arduino-joystick.c **** /** Event handler for the library USB Disconnection event. */
 145:Arduino-joystick.c **** void EVENT_USB_Device_Disconnect(void)
 146:Arduino-joystick.c **** {
 273               		.loc 3 146 0
 274               		.cfi_startproc
 275               	/* prologue: function */
 276               	/* frame size = 0 */
 277               	/* stack size = 0 */
 278               	.L__stack_usage = 0
 279 0000 0895      		ret
 280               		.cfi_endproc
 281               	.LFE89:
 283               		.section	.text.EVENT_USB_Device_ConfigurationChanged,"ax",@progbits
 284               	.global	EVENT_USB_Device_ConfigurationChanged
 286               	EVENT_USB_Device_ConfigurationChanged:
 287               	.LFB90:
 147:Arduino-joystick.c **** }
 148:Arduino-joystick.c **** 
 149:Arduino-joystick.c **** /** Event handler for the library USB Configuration Changed event. */
 150:Arduino-joystick.c **** void EVENT_USB_Device_ConfigurationChanged(void)
 151:Arduino-joystick.c **** {
 288               		.loc 3 151 0
 289               		.cfi_startproc
 290               	/* prologue: function */
 291               	/* frame size = 0 */
 292               	/* stack size = 0 */
 293               	.L__stack_usage = 0
 152:Arduino-joystick.c ****     HID_Device_ConfigureEndpoints(&Joystick_HID_Interface);
 294               		.loc 3 152 0
 295 0000 80E0      		ldi r24,lo8(Joystick_HID_Interface)
 296 0002 90E0      		ldi r25,hi8(Joystick_HID_Interface)
 297 0004 0E94 0000 		call HID_Device_ConfigureEndpoints
 298               	.LVL15:
 299               	.LBB76:
 300               	.LBB77:
 301               		.file 6 "../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h"
   1:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** /*
   2:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****              LUFA Library
   3:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****      Copyright (C) Dean Camera, 2010.
   4:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****               
   5:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****       www.fourwalledcubicle.com
   7:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** */
   8:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
   9:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** /*
  10:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  12:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   Permission to use, copy, modify, distribute, and sell this 
  13:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   without fee, provided that the above copyright notice appear in 
  15:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   all copies and that both that the copyright notice and this
  16:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   permission notice and warranty disclaimer appear in supporting 
  17:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   documentation, and that the name of the author not be used in 
  18:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   advertising or publicity pertaining to distribution of the 
  19:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   software without specific, written prior permission.
  20:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  21:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   The author disclaim all warranties with regard to this
  22:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   software, including all implied warranties of merchantability
  23:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   special, indirect or consequential damages or any damages
  25:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   arising out of or in connection with the use or performance of
  28:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   this software.
  29:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** */
  30:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  31:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** /** \file
  32:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *  \brief USB device mode definitions.
  33:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *
  34:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *  This file contains structures, function prototypes and macros related to USB device mode.
  35:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *
  36:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  37:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  38:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  */
  39:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  40:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** /** \ingroup Group_USB
  41:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *  @defgroup Group_Device Device Management
  42:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *
  43:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *  USB Device mode related macros and enums. This module contains macros and enums which are used 
  44:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *  the USB controller is initialized in device mode.
  45:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *
  46:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *  @{
  47:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  */
  48:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  49:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** #ifndef __USBDEVICE_H__
  50:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** #define __USBDEVICE_H__
  51:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  52:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 	/* Includes: */
  53:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#include <avr/io.h>
  54:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#include <avr/pgmspace.h>
  55:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#include <avr/eeprom.h>
  56:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  57:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#include "../../../Common/Common.h"	
  58:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#include "../HighLevel/StdDescriptors.h"
  59:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#include "USBInterrupt.h"
  60:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#include "Endpoint.h"
  61:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  62:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 	/* Preprocessor Checks: */
  63:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#if (defined(USE_RAM_DESCRIPTORS) && defined(USE_EEPROM_DESCRIPTORS))
  64:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			#error USE_RAM_DESCRIPTORS and USE_EEPROM_DESCRIPTORS are mutually exclusive.
  65:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#endif
  66:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  67:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  68:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  69:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#endif
  70:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			
  71:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 	/* Public Interface - May be used in end-application: */
  72:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		/* Macros: */
  73:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defin
  74:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				/** Mask for the Options parameter of the \ref USB_Init() function. This indicates that the
  75:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				 *  USB interface should be initialized in low speed (1.5Mb/s) mode.
  76:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				 *
  77:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				 *  \note Low Speed mode is not available on all USB AVR models.
  78:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				 *        \n\n
  79:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				 *
  80:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				 *  \note Restrictions apply on the number, size and type of endpoints which can be used
  81:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				 *        when running in low speed mode -- refer to the USB 2.0 standard.
  82:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				 */
  83:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				#define USB_DEVICE_OPT_LOWSPEED            (1 << 0)
  84:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			#endif
  85:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			
  86:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			/** Mask for the Options parameter of the \ref USB_Init() function. This indicates that the
  87:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  USB interface should be initialized in full speed (12Mb/s) mode.
  88:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 */
  89:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			#define USB_DEVICE_OPT_FULLSPEED               (0 << 0)
  90:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  91:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		/* Function Prototypes: */
  92:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			/** Sends a Remote Wakeup request to the host. This signals to the host that the device should
  93:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  be taken out of suspended mode, and communications should resume.
  94:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *
  95:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  Typically, this is implemented so that HID devices (mice, keyboards, etc.) can wake up the
  96:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  host computer when the host has suspended all USB devices to enter a low power state.
  97:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *
  98:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  \note This macro should only be used if the device has indicated to the host that it
  99:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        supports the Remote Wakeup feature in the device descriptors, and should only be
 100:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        issued if the host is currently allowing remote wakeup events from the device (i.e.,
 101:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        the \ref USB_RemoteWakeupEnabled flag is set). When the NO_DEVICE_REMOTE_WAKEUP compil
 102:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        time option is used, this macro is unavailable.
 103:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        \n
 104:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *
 105:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  \note The USB clock must be running for this function to operate. If the stack is initialize
 106:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        the \ref USB_OPT_MANUAL_PLL option enabled, the user must ensure that the PLL is runni
 107:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        before attempting to call this function.
 108:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *
 109:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  \see \ref Group_Descriptors for more information on the RMWAKEUP feature and device descript
 110:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 */
 111:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			void USB_Device_SendRemoteWakeup(void);
 112:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			
 113:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		/* Type Defines: */
 114:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			enum USB_Device_States_t
 115:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			{
 116:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Unattached                   = 0, /**< Internally implemented by the library. This
 117:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   that the device is not currently connected 
 118:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                */
 119:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Powered                      = 1, /**< Internally implemented by the library. This
 120:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   that the device is connected to a host, but
 121:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   yet begun.
 122:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                */
 123:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Default                      = 2, /**< Internally implemented by the library. This
 124:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   that the device's USB bus has been reset by
 125:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   now waiting for the host to begin the enume
 126:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                */
 127:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Addressed                    = 3, /**< Internally implemented by the library. This
 128:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   that the device has been addressed by the U
 129:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   yet configured.
 130:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                */
 131:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Configured                   = 4, /**< May be implemented by the user project. Thi
 132:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   that the device has been enumerated by the 
 133:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   for USB communications to begin.
 134:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                */
 135:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Suspended                    = 5, /**< May be implemented by the user project. Thi
 136:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   that the USB bus has been suspended by the 
 137:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   should power down to a minimal power level 
 138:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   resumed.
 139:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                */
 140:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			};
 141:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			
 142:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		/* Inline Functions: */
 143:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			/** Enables the device mode Start Of Frame events. When enabled, this causes the
 144:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  \ref EVENT_USB_Device_StartOfFrame() event to fire once per millisecond, synchronized to the
 145:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  at the start of each USB frame when enumerated in device mode.
 146:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 */
 147:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			static inline void USB_Device_EnableSOFEvents(void) ATTR_ALWAYS_INLINE;
 148:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			static inline void USB_Device_EnableSOFEvents(void)
 149:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			{
 150:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				USB_INT_Enable(USB_INT_SOFI);
 302               		.loc 6 150 0
 303 0008 E2EE      		ldi r30,lo8(-30)
 304 000a F0E0      		ldi r31,0
 305 000c 8081      		ld r24,Z
 306 000e 8460      		ori r24,lo8(4)
 307 0010 8083      		st Z,r24
 308 0012 0895      		ret
 309               	.LBE77:
 310               	.LBE76:
 311               		.cfi_endproc
 312               	.LFE90:
 314               		.section	.text.EVENT_USB_Device_UnhandledControlRequest,"ax",@progbits
 315               	.global	EVENT_USB_Device_UnhandledControlRequest
 317               	EVENT_USB_Device_UnhandledControlRequest:
 318               	.LFB91:
 153:Arduino-joystick.c **** 
 154:Arduino-joystick.c ****     USB_Device_EnableSOFEvents();
 155:Arduino-joystick.c **** }
 156:Arduino-joystick.c **** 
 157:Arduino-joystick.c **** /** Event handler for the library USB Unhandled Control Request event. */
 158:Arduino-joystick.c **** void EVENT_USB_Device_UnhandledControlRequest(void)
 159:Arduino-joystick.c **** {
 319               		.loc 3 159 0
 320               		.cfi_startproc
 321               	/* prologue: function */
 322               	/* frame size = 0 */
 323               	/* stack size = 0 */
 324               	.L__stack_usage = 0
 160:Arduino-joystick.c ****     HID_Device_ProcessControlRequest(&Joystick_HID_Interface);
 325               		.loc 3 160 0
 326 0000 80E0      		ldi r24,lo8(Joystick_HID_Interface)
 327 0002 90E0      		ldi r25,hi8(Joystick_HID_Interface)
 328 0004 0C94 0000 		jmp HID_Device_ProcessControlRequest
 329               	.LVL16:
 330               		.cfi_endproc
 331               	.LFE91:
 333               		.section	.text.EVENT_USB_Device_StartOfFrame,"ax",@progbits
 334               	.global	EVENT_USB_Device_StartOfFrame
 336               	EVENT_USB_Device_StartOfFrame:
 337               	.LFB92:
 161:Arduino-joystick.c **** }
 162:Arduino-joystick.c **** 
 163:Arduino-joystick.c **** /** Event handler for the USB device Start Of Frame event. */
 164:Arduino-joystick.c **** void EVENT_USB_Device_StartOfFrame(void)
 165:Arduino-joystick.c **** {
 338               		.loc 3 165 0
 339               		.cfi_startproc
 340               	/* prologue: function */
 341               	/* frame size = 0 */
 342               	/* stack size = 0 */
 343               	.L__stack_usage = 0
 344               	.LVL17:
 345               	.LBB78:
 346               	.LBB79:
 347               		.file 7 "../../LUFA/Drivers/USB/Class/Device/HID.h"
   1:../../LUFA/Drivers/USB/Class/Device/HID.h **** /*
   2:../../LUFA/Drivers/USB/Class/Device/HID.h ****              LUFA Library
   3:../../LUFA/Drivers/USB/Class/Device/HID.h ****      Copyright (C) Dean Camera, 2010.
   4:../../LUFA/Drivers/USB/Class/Device/HID.h ****               
   5:../../LUFA/Drivers/USB/Class/Device/HID.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA/Drivers/USB/Class/Device/HID.h ****       www.fourwalledcubicle.com
   7:../../LUFA/Drivers/USB/Class/Device/HID.h **** */
   8:../../LUFA/Drivers/USB/Class/Device/HID.h **** 
   9:../../LUFA/Drivers/USB/Class/Device/HID.h **** /*
  10:../../LUFA/Drivers/USB/Class/Device/HID.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA/Drivers/USB/Class/Device/HID.h **** 
  12:../../LUFA/Drivers/USB/Class/Device/HID.h ****   Permission to use, copy, modify, distribute, and sell this 
  13:../../LUFA/Drivers/USB/Class/Device/HID.h ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA/Drivers/USB/Class/Device/HID.h ****   without fee, provided that the above copyright notice appear in 
  15:../../LUFA/Drivers/USB/Class/Device/HID.h ****   all copies and that both that the copyright notice and this
  16:../../LUFA/Drivers/USB/Class/Device/HID.h ****   permission notice and warranty disclaimer appear in supporting 
  17:../../LUFA/Drivers/USB/Class/Device/HID.h ****   documentation, and that the name of the author not be used in 
  18:../../LUFA/Drivers/USB/Class/Device/HID.h ****   advertising or publicity pertaining to distribution of the 
  19:../../LUFA/Drivers/USB/Class/Device/HID.h ****   software without specific, written prior permission.
  20:../../LUFA/Drivers/USB/Class/Device/HID.h **** 
  21:../../LUFA/Drivers/USB/Class/Device/HID.h ****   The author disclaim all warranties with regard to this
  22:../../LUFA/Drivers/USB/Class/Device/HID.h ****   software, including all implied warranties of merchantability
  23:../../LUFA/Drivers/USB/Class/Device/HID.h ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA/Drivers/USB/Class/Device/HID.h ****   special, indirect or consequential damages or any damages
  25:../../LUFA/Drivers/USB/Class/Device/HID.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA/Drivers/USB/Class/Device/HID.h ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA/Drivers/USB/Class/Device/HID.h ****   arising out of or in connection with the use or performance of
  28:../../LUFA/Drivers/USB/Class/Device/HID.h ****   this software.
  29:../../LUFA/Drivers/USB/Class/Device/HID.h **** */
  30:../../LUFA/Drivers/USB/Class/Device/HID.h **** 
  31:../../LUFA/Drivers/USB/Class/Device/HID.h **** /** \file
  32:../../LUFA/Drivers/USB/Class/Device/HID.h ****  *  \brief Device mode driver for the library USB HID Class driver.
  33:../../LUFA/Drivers/USB/Class/Device/HID.h ****  *
  34:../../LUFA/Drivers/USB/Class/Device/HID.h ****  *  Device mode driver for the library USB HID Class driver.
  35:../../LUFA/Drivers/USB/Class/Device/HID.h ****  *
  36:../../LUFA/Drivers/USB/Class/Device/HID.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  37:../../LUFA/Drivers/USB/Class/Device/HID.h ****  *        dispatch header located in LUFA/Drivers/USB/Class/HID.h.
  38:../../LUFA/Drivers/USB/Class/Device/HID.h ****  */
  39:../../LUFA/Drivers/USB/Class/Device/HID.h **** 
  40:../../LUFA/Drivers/USB/Class/Device/HID.h **** /** \ingroup Group_USBClassHID
  41:../../LUFA/Drivers/USB/Class/Device/HID.h ****  *  @defgroup Group_USBClassHIDDevice HID Class Device Mode Driver
  42:../../LUFA/Drivers/USB/Class/Device/HID.h ****  *
  43:../../LUFA/Drivers/USB/Class/Device/HID.h ****  *  \section Sec_Dependencies Module Source Dependencies
  44:../../LUFA/Drivers/USB/Class/Device/HID.h ****  *  The following files must be built with any user project that uses this module:
  45:../../LUFA/Drivers/USB/Class/Device/HID.h ****  *    - LUFA/Drivers/USB/Class/Device/HID.c <i>(Makefile source module name: LUFA_SRC_USBCLASS)</i>
  46:../../LUFA/Drivers/USB/Class/Device/HID.h ****  *
  47:../../LUFA/Drivers/USB/Class/Device/HID.h ****  *  \section Module Description
  48:../../LUFA/Drivers/USB/Class/Device/HID.h ****  *  Device Mode USB Class driver framework interface, for the HID USB Class driver.
  49:../../LUFA/Drivers/USB/Class/Device/HID.h ****  *
  50:../../LUFA/Drivers/USB/Class/Device/HID.h ****  *  @{
  51:../../LUFA/Drivers/USB/Class/Device/HID.h ****  */
  52:../../LUFA/Drivers/USB/Class/Device/HID.h ****  
  53:../../LUFA/Drivers/USB/Class/Device/HID.h **** #ifndef _HID_CLASS_DEVICE_H_
  54:../../LUFA/Drivers/USB/Class/Device/HID.h **** #define _HID_CLASS_DEVICE_H_
  55:../../LUFA/Drivers/USB/Class/Device/HID.h **** 
  56:../../LUFA/Drivers/USB/Class/Device/HID.h **** 	/* Includes: */
  57:../../LUFA/Drivers/USB/Class/Device/HID.h **** 		#include "../../USB.h"
  58:../../LUFA/Drivers/USB/Class/Device/HID.h **** 		#include "../Common/HID.h"
  59:../../LUFA/Drivers/USB/Class/Device/HID.h **** 
  60:../../LUFA/Drivers/USB/Class/Device/HID.h **** 		#include <string.h>
  61:../../LUFA/Drivers/USB/Class/Device/HID.h **** 
  62:../../LUFA/Drivers/USB/Class/Device/HID.h **** 	/* Enable C linkage for C++ Compilers: */
  63:../../LUFA/Drivers/USB/Class/Device/HID.h **** 		#if defined(__cplusplus)
  64:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			extern "C" {
  65:../../LUFA/Drivers/USB/Class/Device/HID.h **** 		#endif
  66:../../LUFA/Drivers/USB/Class/Device/HID.h **** 
  67:../../LUFA/Drivers/USB/Class/Device/HID.h **** 	/* Preprocessor Checks: */
  68:../../LUFA/Drivers/USB/Class/Device/HID.h **** 		#if !defined(__INCLUDE_FROM_HID_DRIVER)
  69:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			#error Do not include this file directly. Include LUFA/Drivers/Class/HID.h instead.
  70:../../LUFA/Drivers/USB/Class/Device/HID.h **** 		#endif
  71:../../LUFA/Drivers/USB/Class/Device/HID.h **** 
  72:../../LUFA/Drivers/USB/Class/Device/HID.h **** 	/* Public Interface - May be used in end-application: */
  73:../../LUFA/Drivers/USB/Class/Device/HID.h **** 		/* Type Defines: */
  74:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			/** \brief HID Class Device Mode Configuration and State Structure.
  75:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *
  76:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  Class state structure. An instance of this structure should be made for each HID interface
  77:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  within the user application, and passed to each of the HID class driver functions as the
  78:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  HIDInterfaceInfo parameter. This stores each HID interface's configuration and state informa
  79:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *
  80:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \note Due to technical limitations, the HID device class driver does not utilize a separate 
  81:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *        endpoint for host->device communications. Instead, the host->device data (if any) is s
  82:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *        the device via the control endpoint.
  83:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 */
  84:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			typedef struct
  85:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			{
  86:../../LUFA/Drivers/USB/Class/Device/HID.h **** 				const struct
  87:../../LUFA/Drivers/USB/Class/Device/HID.h **** 				{
  88:../../LUFA/Drivers/USB/Class/Device/HID.h **** 					uint8_t  InterfaceNumber; /**< Interface number of the HID interface within the device. */
  89:../../LUFA/Drivers/USB/Class/Device/HID.h **** 
  90:../../LUFA/Drivers/USB/Class/Device/HID.h **** 					uint8_t  ReportINEndpointNumber; /**< Endpoint number of the HID interface's IN report endpoin
  91:../../LUFA/Drivers/USB/Class/Device/HID.h **** 					uint16_t ReportINEndpointSize; /**< Size in bytes of the HID interface's IN report endpoint. *
  92:../../LUFA/Drivers/USB/Class/Device/HID.h **** 					bool     ReportINEndpointDoubleBank; /**< Indicates if the HID interface's IN report endpoint 
  93:../../LUFA/Drivers/USB/Class/Device/HID.h **** 					
  94:../../LUFA/Drivers/USB/Class/Device/HID.h **** 					void*    PrevReportINBuffer; /**< Pointer to a buffer where the previously created HID input r
  95:../../LUFA/Drivers/USB/Class/Device/HID.h **** 					                              *  stored by the driver, for comparison purposes to detect repor
  96:../../LUFA/Drivers/USB/Class/Device/HID.h **** 					                              *  must be sent immediately to the host. This should point to a 
  97:../../LUFA/Drivers/USB/Class/Device/HID.h **** 					                              *  to hold the largest HID input report sent from the HID interf
  98:../../LUFA/Drivers/USB/Class/Device/HID.h **** 												  *  to NULL, it is up to the user to force transfers when needed in the 
  99:../../LUFA/Drivers/USB/Class/Device/HID.h **** 												  *  \ref CALLBACK_HID_Device_CreateHIDReport() callback function.
 100:../../LUFA/Drivers/USB/Class/Device/HID.h **** 												  *
 101:../../LUFA/Drivers/USB/Class/Device/HID.h **** 												  *  \note Due to the single buffer, the internal driver can only correctly compare
 102:../../LUFA/Drivers/USB/Class/Device/HID.h **** 												  *        subsequent reports with identical report IDs. In multiple report devices,
 103:../../LUFA/Drivers/USB/Class/Device/HID.h **** 												  *        this buffer should be set to NULL and the decision to send reports made
 104:../../LUFA/Drivers/USB/Class/Device/HID.h **** 												  *        by the user application instead.
 105:../../LUFA/Drivers/USB/Class/Device/HID.h **** 					                              */
 106:../../LUFA/Drivers/USB/Class/Device/HID.h **** 					uint8_t  PrevReportINBufferSize; /**< Size in bytes of the given input report buffer. This is 
 107:../../LUFA/Drivers/USB/Class/Device/HID.h **** 					                                  *  second buffer of the same size within the driver so that 
 108:../../LUFA/Drivers/USB/Class/Device/HID.h **** 					                                  *  can be compared. If the user app is to determine when rep
 109:../../LUFA/Drivers/USB/Class/Device/HID.h **** 					                                  *  exclusively (i.e. \ref PrevReportINBuffer is NULL) this v
 110:../../LUFA/Drivers/USB/Class/Device/HID.h **** 													  *  set to the size of the largest report the device can issue to the host.
 111:../../LUFA/Drivers/USB/Class/Device/HID.h **** 					                                  */
 112:../../LUFA/Drivers/USB/Class/Device/HID.h **** 				} Config; /**< Config data for the USB class interface within the device. All elements in this 
 113:../../LUFA/Drivers/USB/Class/Device/HID.h **** 				           *   <b>must</b> be set or the interface will fail to enumerate and operate correctly
 114:../../LUFA/Drivers/USB/Class/Device/HID.h **** 				           */										 
 115:../../LUFA/Drivers/USB/Class/Device/HID.h **** 				struct
 116:../../LUFA/Drivers/USB/Class/Device/HID.h **** 				{
 117:../../LUFA/Drivers/USB/Class/Device/HID.h **** 					bool     UsingReportProtocol; /**< Indicates if the HID interface is set to Boot or Report pro
 118:../../LUFA/Drivers/USB/Class/Device/HID.h **** 					uint16_t IdleCount; /**< Report idle period, in milliseconds, set by the host. */
 119:../../LUFA/Drivers/USB/Class/Device/HID.h **** 					uint16_t IdleMSRemaining; /**< Total number of milliseconds remaining before the idle period e
 120:../../LUFA/Drivers/USB/Class/Device/HID.h **** 											   *   should be decremented by the user application if non-zero each millisecond. */	
 121:../../LUFA/Drivers/USB/Class/Device/HID.h **** 				} State; /**< State data for the USB class interface within the device. All elements in this se
 122:../../LUFA/Drivers/USB/Class/Device/HID.h **** 				          *   are reset to their defaults when the interface is enumerated.
 123:../../LUFA/Drivers/USB/Class/Device/HID.h **** 				          */
 124:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			} USB_ClassInfo_HID_Device_t;
 125:../../LUFA/Drivers/USB/Class/Device/HID.h **** 	
 126:../../LUFA/Drivers/USB/Class/Device/HID.h **** 		/* Function Prototypes: */
 127:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			/** Configures the endpoints of a given HID interface, ready for use. This should be linked to t
 128:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \ref EVENT_USB_Device_ConfigurationChanged() event so that the endpoints are configured when
 129:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  containing the given HID interface is selected.
 130:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *
 131:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration
 132:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *
 133:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \return Boolean true if the endpoints were successfully configured, false otherwise.
 134:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 */
 135:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_NON_
 136:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			
 137:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			/** Processes incoming control requests from the host, that are directed to the given HID class 
 138:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  linked to the library \ref EVENT_USB_Device_UnhandledControlRequest() event.
 139:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *
 140:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration
 141:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 */		
 142:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_N
 143:../../LUFA/Drivers/USB/Class/Device/HID.h **** 
 144:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			/** General management task for a given HID class interface, required for the correct operation 
 145:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  be called frequently in the main program loop, before the master USB management task \ref US
 146:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *
 147:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration
 148:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 */
 149:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_NON_NULL_PTR_AR
 150:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			
 151:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			/** HID class driver callback for the user creation of a HID IN report. This callback may fire i
 152:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  HID class control requests from the host, or by the normal HID endpoint polling procedure. I
 153:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  user is responsible for the creation of the next HID input report to be sent to the host.
 154:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *
 155:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration
 156:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[in,out] ReportID          If preset to a non-zero value, this is the report ID being 
 157:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *                                   this should be set to the report ID of the generated HID in
 158:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *                                   reports are not sent via the given HID interface, this para
 159:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[in]     ReportType        Type of HID report to generate, either \ref REPORT_ITEM_TYP
 160:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[out]    ReportData        Pointer to a buffer where the generated HID report should b
 161:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[out]    ReportSize        Number of bytes in the generated input report, or zero if n
 162:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *
 163:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \return Boolean true to force the sending of the report even if it is identical to the previ
 164:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *          the idle period (useful for devices which report relative movement), false otherwise
 165:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 */
 166:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
 167:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			                                         uint8_t* const ReportID,
 168:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			                                         const uint8_t ReportType,
 169:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			                                         void* ReportData,
 170:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			                                         uint16_t* const ReportSize) ATTR_NON_NULL_PTR_ARG(1)
 171:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			                                         ATTR_NON_NULL_PTR_ARG(2) ATTR_NON_NULL_PTR_ARG(4) ATTR_
 172:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			
 173:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			/** HID class driver callback for the user processing of a received HID OUT report. This callbac
 174:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  either HID class control requests from the host, or by the normal HID endpoint polling proce
 175:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  the user is responsible for the processing of the received HID output report from the host.
 176:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *
 177:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration
 178:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[in]     ReportID          Report ID of the received output report. If multiple report
 179:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *                                   interface, this parameter should be ignored.
 180:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[in]     ReportType        Type of received HID report, either \ref REPORT_ITEM_TYPE_O
 181:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[in]     ReportData        Pointer to a buffer where the received HID report is stored
 182:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[in]     ReportSize        Size in bytes of the received report from the host.
 183:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 */
 184:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
 185:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			                                          const uint8_t ReportID,
 186:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			                                          const uint8_t ReportType,
 187:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			                                          const void* ReportData,
 188:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			                                          const uint16_t ReportSize) ATTR_NON_NULL_PTR_ARG(1) AT
 189:../../LUFA/Drivers/USB/Class/Device/HID.h **** 
 190:../../LUFA/Drivers/USB/Class/Device/HID.h **** 		/* Inline Functions: */
 191:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			/** Indicates that a millisecond of idle time has elapsed on the given HID interface, and the in
 192:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  decremented. This should be called once per millisecond so that hardware key-repeats functio
 193:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  that this be called by the \ref EVENT_USB_Device_StartOfFrame() event, once SOF events have 
 194:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \ref USB_Device_EnableSOFEvents().
 195:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *
 196:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration
 197:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			 */
 198:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceI
 199:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceI
 200:../../LUFA/Drivers/USB/Class/Device/HID.h **** 			{
 201:../../LUFA/Drivers/USB/Class/Device/HID.h **** 				if (HIDInterfaceInfo->State.IdleMSRemaining)
 348               		.loc 7 201 0
 349 0000 8091 0000 		lds r24,Joystick_HID_Interface+11
 350 0004 9091 0000 		lds r25,Joystick_HID_Interface+11+1
 351 0008 0097      		sbiw r24,0
 352 000a 01F0      		breq .L15
 202:../../LUFA/Drivers/USB/Class/Device/HID.h **** 				  HIDInterfaceInfo->State.IdleMSRemaining--;
 353               		.loc 7 202 0
 354 000c 0197      		sbiw r24,1
 355 000e 9093 0000 		sts Joystick_HID_Interface+11+1,r25
 356 0012 8093 0000 		sts Joystick_HID_Interface+11,r24
 357               	.L15:
 358 0016 0895      		ret
 359               	.LBE79:
 360               	.LBE78:
 361               		.cfi_endproc
 362               	.LFE92:
 364               		.section	.text.CALLBACK_HID_Device_CreateHIDReport,"ax",@progbits
 365               	.global	CALLBACK_HID_Device_CreateHIDReport
 367               	CALLBACK_HID_Device_CreateHIDReport:
 368               	.LFB93:
 166:Arduino-joystick.c ****     HID_Device_MillisecondElapsed(&Joystick_HID_Interface);
 167:Arduino-joystick.c **** }
 168:Arduino-joystick.c **** 
 169:Arduino-joystick.c **** /** HID class driver callback function for the creation of HID reports to the host.
 170:Arduino-joystick.c ****  *
 171:Arduino-joystick.c ****  *  \param[in]     HIDInterfaceInfo  Pointer to the HID class interface configuration structure bei
 172:Arduino-joystick.c ****  *  \param[in,out] ReportID    Report ID requested by the host if non-zero, otherwise callback shou
 173:Arduino-joystick.c ****  *  \param[in]     ReportType  Type of the report to create, either REPORT_ITEM_TYPE_In or REPORT_I
 174:Arduino-joystick.c ****  *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 175:Arduino-joystick.c ****  *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be
 176:Arduino-joystick.c ****  *
 177:Arduino-joystick.c ****  *  \return Boolean true to force the sending of the report, false to let the library determine if 
 178:Arduino-joystick.c ****  */
 179:Arduino-joystick.c **** bool CALLBACK_HID_Device_CreateHIDReport(
 180:Arduino-joystick.c ****     USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
 181:Arduino-joystick.c ****     uint8_t* const ReportID,
 182:Arduino-joystick.c ****     const uint8_t ReportType,
 183:Arduino-joystick.c ****     void* ReportData,
 184:Arduino-joystick.c ****     uint16_t* const ReportSize)
 185:Arduino-joystick.c **** {
 369               		.loc 3 185 0
 370               		.cfi_startproc
 371               	.LVL18:
 372 0000 EF92      		push r14
 373               	.LCFI2:
 374               		.cfi_def_cfa_offset 3
 375               		.cfi_offset 14, -2
 376 0002 FF92      		push r15
 377               	.LCFI3:
 378               		.cfi_def_cfa_offset 4
 379               		.cfi_offset 15, -3
 380 0004 0F93      		push r16
 381               	.LCFI4:
 382               		.cfi_def_cfa_offset 5
 383               		.cfi_offset 16, -4
 384 0006 1F93      		push r17
 385               	.LCFI5:
 386               		.cfi_def_cfa_offset 6
 387               		.cfi_offset 17, -5
 388 0008 CF93      		push r28
 389               	.LCFI6:
 390               		.cfi_def_cfa_offset 7
 391               		.cfi_offset 28, -6
 392 000a DF93      		push r29
 393               	.LCFI7:
 394               		.cfi_def_cfa_offset 8
 395               		.cfi_offset 29, -7
 396               	/* prologue: function */
 397               	/* frame size = 0 */
 398               	/* stack size = 6 */
 399               	.L__stack_usage = 6
 400 000c 7901      		movw r14,r18
 401               	.LBB98:
 402               	.LBB99:
 403               	.LBB100:
 404               	.LBB101:
 111:Lib/LightweightRingBuff.h **** 			{
 405               		.loc 1 111 0
 406 000e 9FB7      		in r25,__SREG__
 407               	.LBE101:
 408               	.LBE100:
 409               	.LBE99:
 410               	.LBE98:
 186:Arduino-joystick.c **** if(ReportType == 2) { //HID_REPORT_ITEM_Feature
 411               		.loc 3 186 0
 412 0010 4230      		cpi r20,lo8(2)
 413 0012 01F4      		brne .L21
 414               	.LVL19:
 415               	.LBB110:
 416               	.LBB108:
 417               	.LBB107:
 418               	.LBB106:
 419               	.LBB102:
 420               	.LBB103:
  50:/usr/lib/avr/include/util/atomic.h ****     return 1;
 421               		.loc 2 50 0
 422               	/* #APP */
 423               	 ;  50 "/usr/lib/avr/include/util/atomic.h" 1
 424 0014 F894      		cli
 425               	 ;  0 "" 2
 426               	.LVL20:
 427               	/* #NOAPP */
 428               	.LBE103:
 429               	.LBE102:
 113:Lib/LightweightRingBuff.h **** 			}
 430               		.loc 1 113 0
 431 0016 8091 0000 		lds r24,USARTtoUSB_Buffer+132
 432               	.LVL21:
 433               	.LBB104:
 434               	.LBB105:
  70:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 435               		.loc 2 70 0
 436 001a 9FBF      		out __SREG__,r25
 437               		.loc 2 71 0
 438               	.LBE105:
 439               	.LBE104:
 440               	.LBE106:
 441               	.LBE107:
 442               	.LBE108:
 187:Arduino-joystick.c ****    USB_JoystickReport_Data_t_GetFeature *reportp = (USB_JoystickReport_Data_t_GetFeature*)ReportDat
 188:Arduino-joystick.c ****     RingBuff_Count_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);
 189:Arduino-joystick.c **** 
 190:Arduino-joystick.c ****     if (BufferCount >= (sizeof(joyReportBack) + 1)) {
 443               		.loc 3 190 0
 444 001c 8930      		cpi r24,lo8(9)
 445 001e 00F0      		brlo .L22
 446 0020 C0E0      		ldi r28,lo8(joyReportBack)
 447 0022 D0E0      		ldi r29,hi8(joyReportBack)
 448               	.LVL22:
 449               	.L24:
 450               	.LBB109:
 191:Arduino-joystick.c **** 	uint8_t ind;
 192:Arduino-joystick.c **** 	for (ind=0; ind<sizeof(joyReportBack); ind++) {
 193:Arduino-joystick.c **** 	    ((uint8_t *)&joyReportBack)[ind] = RingBuffer_Remove(&USARTtoUSB_Buffer);
 451               		.loc 3 193 0 discriminator 2
 452 0024 0E94 0000 		call RingBuffer_Remove.constprop.4
 453               	.LVL23:
 454 0028 8993      		st Y+,r24
 455               	.LVL24:
 192:Arduino-joystick.c **** 	    ((uint8_t *)&joyReportBack)[ind] = RingBuffer_Remove(&USARTtoUSB_Buffer);
 456               		.loc 3 192 0 discriminator 2
 457 002a 80E0      		ldi r24,hi8(joyReportBack+8)
 458 002c C030      		cpi r28,lo8(joyReportBack+8)
 459 002e D807      		cpc r29,r24
 460 0030 01F4      		brne .L24
 194:Arduino-joystick.c **** 	}
 195:Arduino-joystick.c **** 
 196:Arduino-joystick.c **** 	/* Remove spacer */
 197:Arduino-joystick.c **** 	RingBuffer_Remove(&USARTtoUSB_Buffer);
 461               		.loc 3 197 0
 462 0032 0E94 0000 		call RingBuffer_Remove.constprop.4
 463               	.LVL25:
 464               	.L22:
 465               	.LBE109:
 198:Arduino-joystick.c **** 
 199:Arduino-joystick.c **** 	//LEDs_TurnOnLEDs(LEDS_LED1);
 200:Arduino-joystick.c **** 	//led1_ticks = LED_ON_TICKS;
 201:Arduino-joystick.c ****     }
 202:Arduino-joystick.c **** 
 203:Arduino-joystick.c ****     *reportp = joyReportBack;
 466               		.loc 3 203 0
 467 0036 88E0      		ldi r24,lo8(8)
 468 0038 E0E0      		ldi r30,lo8(joyReportBack)
 469 003a F0E0      		ldi r31,hi8(joyReportBack)
 470 003c D701      		movw r26,r14
 471               		0:
 472 003e 0190      		ld r0,Z+
 473 0040 0D92      		st X+,r0
 474 0042 8A95      		dec r24
 475 0044 01F4      		brne 0b
 204:Arduino-joystick.c ****     *ReportSize = sizeof(USB_JoystickReport_Data_t_GetFeature);
 476               		.loc 3 204 0
 477 0046 88E0      		ldi r24,lo8(8)
 478 0048 90E0      		ldi r25,0
 479 004a 00C0      		rjmp .L29
 480               	.LVL26:
 481               	.L21:
 482               	.LBE110:
 483               	.LBB111:
 484               	.LBB112:
 485               	.LBB113:
 486               	.LBB114:
 487               	.LBB115:
 488               	.LBB116:
  50:/usr/lib/avr/include/util/atomic.h ****     return 1;
 489               		.loc 2 50 0
 490               	/* #APP */
 491               	 ;  50 "/usr/lib/avr/include/util/atomic.h" 1
 492 004c F894      		cli
 493               	 ;  0 "" 2
 494               	.LVL27:
 495               	/* #NOAPP */
 496               	.LBE116:
 497               	.LBE115:
 113:Lib/LightweightRingBuff.h **** 			}
 498               		.loc 1 113 0
 499 004e 8091 0000 		lds r24,USARTtoUSB_Buffer+132
 500               	.LVL28:
 501               	.LBB117:
 502               	.LBB118:
  70:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 503               		.loc 2 70 0
 504 0052 9FBF      		out __SREG__,r25
 505               		.loc 2 71 0
 506               	.LBE118:
 507               	.LBE117:
 508               	.LBE114:
 509               	.LBE113:
 510               	.LBE112:
 205:Arduino-joystick.c **** } else {
 206:Arduino-joystick.c ****     USB_JoystickReport_Data_t *reportp = (USB_JoystickReport_Data_t*)ReportData;
 207:Arduino-joystick.c ****     RingBuff_Count_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);
 208:Arduino-joystick.c **** 
 209:Arduino-joystick.c ****     if (BufferCount >= (sizeof(joyReport) + 1)) {
 511               		.loc 3 209 0
 512 0054 8C31      		cpi r24,lo8(28)
 513 0056 00F0      		brlo .L26
 514 0058 C0E0      		ldi r28,lo8(joyReport)
 515 005a D0E0      		ldi r29,hi8(joyReport)
 516               	.LVL29:
 517               	.L28:
 518               	.LBB119:
 210:Arduino-joystick.c **** 	uint8_t ind;
 211:Arduino-joystick.c **** 	for (ind=0; ind<sizeof(joyReport); ind++) {
 212:Arduino-joystick.c **** 	    ((uint8_t *)&joyReport)[ind] = RingBuffer_Remove(&USARTtoUSB_Buffer);
 519               		.loc 3 212 0 discriminator 2
 520 005c 0E94 0000 		call RingBuffer_Remove.constprop.4
 521               	.LVL30:
 522 0060 8993      		st Y+,r24
 523               	.LVL31:
 211:Arduino-joystick.c **** 	    ((uint8_t *)&joyReport)[ind] = RingBuffer_Remove(&USARTtoUSB_Buffer);
 524               		.loc 3 211 0 discriminator 2
 525 0062 F0E0      		ldi r31,hi8(joyReport+27)
 526 0064 C030      		cpi r28,lo8(joyReport+27)
 527 0066 DF07      		cpc r29,r31
 528 0068 01F4      		brne .L28
 213:Arduino-joystick.c **** 	}
 214:Arduino-joystick.c **** 
 215:Arduino-joystick.c **** 	/* Remove spacer */
 216:Arduino-joystick.c **** 	RingBuffer_Remove(&USARTtoUSB_Buffer);
 529               		.loc 3 216 0
 530 006a 0E94 0000 		call RingBuffer_Remove.constprop.4
 531               	.LVL32:
 532               	.L26:
 533               	.LBE119:
 217:Arduino-joystick.c **** 
 218:Arduino-joystick.c **** 	//LEDs_TurnOnLEDs(LEDS_LED1);
 219:Arduino-joystick.c **** 	//led1_ticks = LED_ON_TICKS;
 220:Arduino-joystick.c ****     }
 221:Arduino-joystick.c **** 
 222:Arduino-joystick.c ****     *reportp = joyReport;
 534               		.loc 3 222 0
 535 006e 8BE1      		ldi r24,lo8(27)
 536 0070 E0E0      		ldi r30,lo8(joyReport)
 537 0072 F0E0      		ldi r31,hi8(joyReport)
 538 0074 D701      		movw r26,r14
 539               		0:
 540 0076 0190      		ld r0,Z+
 541 0078 0D92      		st X+,r0
 542 007a 8A95      		dec r24
 543 007c 01F4      		brne 0b
 223:Arduino-joystick.c ****     *ReportSize = sizeof(USB_JoystickReport_Data_t);
 544               		.loc 3 223 0
 545 007e 8BE1      		ldi r24,lo8(27)
 546 0080 90E0      		ldi r25,0
 547               	.LVL33:
 548               	.L29:
 549 0082 F801      		movw r30,r16
 550 0084 9183      		std Z+1,r25
 551 0086 8083      		st Z,r24
 552               	.LBE111:
 224:Arduino-joystick.c **** }
 225:Arduino-joystick.c ****     return true; //Was false
 226:Arduino-joystick.c **** }
 553               		.loc 3 226 0
 554 0088 81E0      		ldi r24,lo8(1)
 555               	/* epilogue start */
 556 008a DF91      		pop r29
 557 008c CF91      		pop r28
 558 008e 1F91      		pop r17
 559 0090 0F91      		pop r16
 560               	.LVL34:
 561 0092 FF90      		pop r15
 562 0094 EF90      		pop r14
 563               	.LVL35:
 564 0096 0895      		ret
 565               		.cfi_endproc
 566               	.LFE93:
 568               		.section	.text.CALLBACK_HID_Device_ProcessHIDReport,"ax",@progbits
 569               	.global	CALLBACK_HID_Device_ProcessHIDReport
 571               	CALLBACK_HID_Device_ProcessHIDReport:
 572               	.LFB94:
 227:Arduino-joystick.c **** 
 228:Arduino-joystick.c **** /** HID class driver callback function for the processing of HID reports from the host.
 229:Arduino-joystick.c ****  *
 230:Arduino-joystick.c ****  *  \param[in] HIDInterfaceInfo  Pointer to the HID class interface configuration structure being r
 231:Arduino-joystick.c ****  *  \param[in] ReportID    Report ID of the received report from the host
 232:Arduino-joystick.c ****  *  \param[in] ReportType  The type of report that the host has sent, either REPORT_ITEM_TYPE_Out o
 233:Arduino-joystick.c ****  *  \param[in] ReportData  Pointer to a buffer where the created report has been stored
 234:Arduino-joystick.c ****  *  \param[in] ReportSize  Size in bytes of the received HID report
 235:Arduino-joystick.c ****  */
 236:Arduino-joystick.c **** void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
 237:Arduino-joystick.c ****                                           const uint8_t ReportID,
 238:Arduino-joystick.c ****                                           const uint8_t ReportType,
 239:Arduino-joystick.c ****                                           const void* ReportData,
 240:Arduino-joystick.c ****                                           const uint16_t ReportSize)
 241:Arduino-joystick.c **** {
 573               		.loc 3 241 0
 574               		.cfi_startproc
 575               	.LVL36:
 576               	/* prologue: function */
 577               	/* frame size = 0 */
 578               	/* stack size = 0 */
 579               	.L__stack_usage = 0
 580 0000 0895      		ret
 581               		.cfi_endproc
 582               	.LFE94:
 584               		.section	.text.__vector_23,"ax",@progbits
 585               	.global	__vector_23
 587               	__vector_23:
 588               	.LFB95:
 242:Arduino-joystick.c ****     /* Not used but must be present */
 243:Arduino-joystick.c **** }
 244:Arduino-joystick.c **** 
 245:Arduino-joystick.c **** /** ISR to manage the reception of data from the serial port, placing received bytes into a circula
 246:Arduino-joystick.c ****  *  for later transmission to the host.
 247:Arduino-joystick.c ****  */
 248:Arduino-joystick.c **** ISR(USART1_RX_vect, ISR_BLOCK)
 249:Arduino-joystick.c **** {
 589               		.loc 3 249 0
 590               		.cfi_startproc
 591               		.loc 3 249 0
 592 0000 1F92      		push r1
 593               	.LCFI8:
 594               		.cfi_def_cfa_offset 3
 595               		.cfi_offset 1, -2
 596 0002 0F92      		push r0
 597               	.LCFI9:
 598               		.cfi_def_cfa_offset 4
 599               		.cfi_offset 0, -3
 600 0004 0FB6      		in r0,__SREG__
 601 0006 0F92      		push r0
 602 0008 1124      		clr __zero_reg__
 603 000a 2F93      		push r18
 604               	.LCFI10:
 605               		.cfi_def_cfa_offset 5
 606               		.cfi_offset 18, -4
 607 000c 8F93      		push r24
 608               	.LCFI11:
 609               		.cfi_def_cfa_offset 6
 610               		.cfi_offset 24, -5
 611 000e 9F93      		push r25
 612               	.LCFI12:
 613               		.cfi_def_cfa_offset 7
 614               		.cfi_offset 25, -6
 615 0010 EF93      		push r30
 616               	.LCFI13:
 617               		.cfi_def_cfa_offset 8
 618               		.cfi_offset 30, -7
 619 0012 FF93      		push r31
 620               	.LCFI14:
 621               		.cfi_def_cfa_offset 9
 622               		.cfi_offset 31, -8
 623               	/* prologue: Signal */
 624               	/* frame size = 0 */
 625               	/* stack size = 8 */
 626               	.L__stack_usage = 8
 250:Arduino-joystick.c ****     uint8_t ReceivedByte = UDR1;
 627               		.loc 3 250 0
 628 0014 8091 CE00 		lds r24,206
 629               	.LVL37:
 251:Arduino-joystick.c **** 
 252:Arduino-joystick.c ****     if ((USB_DeviceState == DEVICE_STATE_Configured) &&
 630               		.loc 3 252 0
 631 0018 9EB3      		in r25,0x1e
 632 001a 9430      		cpi r25,lo8(4)
 633 001c 01F4      		brne .L31
 634               	.LVL38:
 635               	.LBB136:
 636               	.LBB137:
 637               	.LBB138:
 638               	.LBB139:
 111:Lib/LightweightRingBuff.h **** 			{
 639               		.loc 1 111 0
 640 001e 2FB7      		in r18,__SREG__
 641               	.LVL39:
 642               	.LBB140:
 643               	.LBB141:
  50:/usr/lib/avr/include/util/atomic.h ****     return 1;
 644               		.loc 2 50 0
 645               	/* #APP */
 646               	 ;  50 "/usr/lib/avr/include/util/atomic.h" 1
 647 0020 F894      		cli
 648               	 ;  0 "" 2
 649               	.LVL40:
 650               	/* #NOAPP */
 651               	.LBE141:
 652               	.LBE140:
 113:Lib/LightweightRingBuff.h **** 			}
 653               		.loc 1 113 0
 654 0022 9091 0000 		lds r25,USARTtoUSB_Buffer+132
 655               	.LVL41:
 656               	.LBB142:
 657               	.LBB143:
  70:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 658               		.loc 2 70 0
 659 0026 2FBF      		out __SREG__,r18
 660               		.loc 2 71 0
 661               	.LBE143:
 662               	.LBE142:
 663               	.LBE139:
 664               	.LBE138:
 665               	.LBE137:
 666               	.LBE136:
 667               		.loc 3 252 0
 668 0028 9038      		cpi r25,lo8(-128)
 669 002a 01F0      		breq .L31
 670               	.LVL42:
 671               	.LBB144:
 672               	.LBB145:
 161:Lib/LightweightRingBuff.h **** 			
 673               		.loc 1 161 0
 674 002c E091 0000 		lds r30,USARTtoUSB_Buffer+128
 675 0030 F091 0000 		lds r31,USARTtoUSB_Buffer+128+1
 676 0034 8083      		st Z,r24
 163:Lib/LightweightRingBuff.h **** 			  Buffer->In = Buffer->Buffer;
 677               		.loc 1 163 0
 678 0036 E091 0000 		lds r30,USARTtoUSB_Buffer+128
 679 003a F091 0000 		lds r31,USARTtoUSB_Buffer+128+1
 680 003e CF01      		movw r24,r30
 681               	.LVL43:
 682 0040 0196      		adiw r24,1
 683 0042 9093 0000 		sts USARTtoUSB_Buffer+128+1,r25
 684 0046 8093 0000 		sts USARTtoUSB_Buffer+128,r24
 685 004a 8050      		subi r24,lo8(USARTtoUSB_Buffer+128)
 686 004c 9040      		sbci r25,hi8(USARTtoUSB_Buffer+128)
 687               	.LVL44:
 688 004e 01F4      		brne .L35
 164:Lib/LightweightRingBuff.h **** 
 689               		.loc 1 164 0
 690 0050 80E0      		ldi r24,lo8(USARTtoUSB_Buffer)
 691 0052 90E0      		ldi r25,hi8(USARTtoUSB_Buffer)
 692 0054 9283      		std Z+2,r25
 693 0056 8183      		std Z+1,r24
 694               	.L35:
 695               	.LBB146:
 166:Lib/LightweightRingBuff.h **** 			{
 696               		.loc 1 166 0
 697 0058 9FB7      		in r25,__SREG__
 698               	.LVL45:
 699               	.LBB147:
 700               	.LBB148:
  50:/usr/lib/avr/include/util/atomic.h ****     return 1;
 701               		.loc 2 50 0
 702               	/* #APP */
 703               	 ;  50 "/usr/lib/avr/include/util/atomic.h" 1
 704 005a F894      		cli
 705               	 ;  0 "" 2
 706               	.LVL46:
 707               	/* #NOAPP */
 708               	.LBE148:
 709               	.LBE147:
 168:Lib/LightweightRingBuff.h **** 			}
 710               		.loc 1 168 0
 711 005c 8091 0000 		lds r24,USARTtoUSB_Buffer+132
 712 0060 8F5F      		subi r24,lo8(-(1))
 713 0062 8093 0000 		sts USARTtoUSB_Buffer+132,r24
 714               	.LVL47:
 715               	.LBB149:
 716               	.LBB150:
  70:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 717               		.loc 2 70 0
 718 0066 9FBF      		out __SREG__,r25
 719               		.loc 2 71 0
 720               	.LVL48:
 721               	.L31:
 722               	/* epilogue start */
 723               	.LBE150:
 724               	.LBE149:
 725               	.LBE146:
 726               	.LBE145:
 727               	.LBE144:
 253:Arduino-joystick.c **** 	    !RingBuffer_IsFull(&USARTtoUSB_Buffer)) {
 254:Arduino-joystick.c **** 	RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
 255:Arduino-joystick.c ****     }
 256:Arduino-joystick.c **** }
 728               		.loc 3 256 0
 729 0068 FF91      		pop r31
 730 006a EF91      		pop r30
 731 006c 9F91      		pop r25
 732 006e 8F91      		pop r24
 733 0070 2F91      		pop r18
 734 0072 0F90      		pop r0
 735 0074 0FBE      		out __SREG__,r0
 736 0076 0F90      		pop r0
 737 0078 1F90      		pop r1
 738 007a 1895      		reti
 739               		.cfi_endproc
 740               	.LFE95:
 742               	.global	led1_ticks
 743               		.section .bss
 746               	led1_ticks:
 747 0000 0000      		.zero	2
 748               	.global	joyReportBack
 749               		.data
 752               	joyReportBack:
 753 0000 21        		.byte	33
 754 0001 26        		.byte	38
 755 0002 01        		.byte	1
 756 0003 06        		.byte	6
 757 0004 00        		.byte	0
 758 0005 00        		.byte	0
 759 0006 00        		.byte	0
 760 0007 00        		.byte	0
 761               	.global	joyReport
 764               	joyReport:
 765 0008 00        		.byte	0
 766 0009 00        		.byte	0
 767 000a 08        		.byte	8
 768 000b 80        		.byte	-128
 769 000c 7F        		.byte	127
 770 000d 80        		.byte	-128
 771 000e 7F        		.byte	127
 772 000f 00        		.byte	0
 773 0010 00        		.byte	0
 774 0011 00        		.byte	0
 775 0012 00        		.byte	0
 776 0013 00        		.byte	0
 777 0014 00        		.byte	0
 778 0015 00        		.byte	0
 779 0016 00        		.byte	0
 780 0017 00        		.byte	0
 781 0018 00        		.byte	0
 782 0019 00        		.byte	0
 783 001a 00        		.byte	0
 784 001b 00        		.byte	0
 785 001c 02        		.byte	2
 786 001d 00        		.byte	0
 787 001e 02        		.byte	2
 788 001f 00        		.byte	0
 789 0020 02        		.byte	2
 790 0021 00        		.byte	0
 791 0022 02        		.byte	2
 792               		.comm	USARTtoUSB_Buffer,133,1
 793               	.global	Joystick_HID_Interface
 796               	Joystick_HID_Interface:
 797 0023 00        		.byte	0
 798 0024 01        		.byte	1
 799 0025 4000      		.word	64
 800 0027 00        		.byte	0
 801 0028 0000      		.word	PrevJoystickHIDReportBuffer
 802 002a 1B        		.byte	27
 803 002b 0000 0000 		.zero	5
 803      00
 804               		.comm	PrevJoystickHIDReportBuffer,27,1
 805               		.text
 806               	.Letext0:
 807               		.file 8 "/usr/lib/avr/include/stdint.h"
 808               		.file 9 "Arduino-joystick.h"
 809               		.file 10 "../../LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h"
 810               		.file 11 "../../LUFA/Drivers/USB/HighLevel/USBTask.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Arduino-joystick.c
     /tmp/ccgpJ3gL.s:2      *ABS*:0000003e __SP_H__
     /tmp/ccgpJ3gL.s:3      *ABS*:0000003d __SP_L__
     /tmp/ccgpJ3gL.s:4      *ABS*:0000003f __SREG__
     /tmp/ccgpJ3gL.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccgpJ3gL.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccgpJ3gL.s:12     .text.RingBuffer_Remove.constprop.4:00000000 RingBuffer_Remove.constprop.4
                            *COM*:00000085 USARTtoUSB_Buffer
     /tmp/ccgpJ3gL.s:76     .text.SetupHardware:00000000 SetupHardware
     /tmp/ccgpJ3gL.s:165    .text.startup.main:00000000 main
     /tmp/ccgpJ3gL.s:796    .data:00000023 Joystick_HID_Interface
     /tmp/ccgpJ3gL.s:746    .bss:00000000 led1_ticks
     /tmp/ccgpJ3gL.s:256    .text.EVENT_USB_Device_Connect:00000000 EVENT_USB_Device_Connect
     /tmp/ccgpJ3gL.s:271    .text.EVENT_USB_Device_Disconnect:00000000 EVENT_USB_Device_Disconnect
     /tmp/ccgpJ3gL.s:286    .text.EVENT_USB_Device_ConfigurationChanged:00000000 EVENT_USB_Device_ConfigurationChanged
     /tmp/ccgpJ3gL.s:317    .text.EVENT_USB_Device_UnhandledControlRequest:00000000 EVENT_USB_Device_UnhandledControlRequest
     /tmp/ccgpJ3gL.s:336    .text.EVENT_USB_Device_StartOfFrame:00000000 EVENT_USB_Device_StartOfFrame
     /tmp/ccgpJ3gL.s:367    .text.CALLBACK_HID_Device_CreateHIDReport:00000000 CALLBACK_HID_Device_CreateHIDReport
     /tmp/ccgpJ3gL.s:752    .data:00000000 joyReportBack
     /tmp/ccgpJ3gL.s:764    .data:00000008 joyReport
     /tmp/ccgpJ3gL.s:571    .text.CALLBACK_HID_Device_ProcessHIDReport:00000000 CALLBACK_HID_Device_ProcessHIDReport
     /tmp/ccgpJ3gL.s:587    .text.__vector_23:00000000 __vector_23
                            *COM*:0000001b PrevJoystickHIDReportBuffer

UNDEFINED SYMBOLS
USB_Init
HID_Device_USBTask
USB_USBTask
HID_Device_ConfigureEndpoints
HID_Device_ProcessControlRequest
__do_copy_data
__do_clear_bss
