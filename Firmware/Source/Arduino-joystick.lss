
Arduino-joystick.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00000fa8  0000103c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fa8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ad  00800130  00800130  0000106c  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000106c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000418  00000000  00000000  0000107d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00007d12  00000000  00000000  00001495  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001f98  00000000  00000000  000091a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002d8c  00000000  00000000  0000b13f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000c00  00000000  00000000  0000decc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000294b  00000000  00000000  0000eacc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004ca6  00000000  00000000  00011417  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000004d0  00000000  00000000  000160bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	#if !defined(__DOXYGEN__)
		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
   0:	d0 c0       	rjmp	.+416    	; 0x1a2 <__ctors_end>
   2:	00 00       	nop
				PLLCSR |= (1 << PLLE);
   4:	e9 c0       	rjmp	.+466    	; 0x1d8 <__bad_interrupt>
   6:	00 00       	nop
   8:	e7 c0       	rjmp	.+462    	; 0x1d8 <__bad_interrupt>
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
   a:	00 00       	nop
   c:	e5 c0       	rjmp	.+458    	; 0x1d8 <__bad_interrupt>
   e:	00 00       	nop
			}
			
			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
  10:	e3 c0       	rjmp	.+454    	; 0x1d8 <__bad_interrupt>
  12:	00 00       	nop
  14:	e1 c0       	rjmp	.+450    	; 0x1d8 <__bad_interrupt>
  16:	00 00       	nop
  18:	df c0       	rjmp	.+446    	; 0x1d8 <__bad_interrupt>
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
  1a:	00 00       	nop
  1c:	dd c0       	rjmp	.+442    	; 0x1d8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	db c0       	rjmp	.+438    	; 0x1d8 <__bad_interrupt>
  22:	00 00       	nop
	while (!(UDCON & (1 << RMWKUP)));
  24:	d9 c0       	rjmp	.+434    	; 0x1d8 <__bad_interrupt>
  26:	00 00       	nop
  28:	d7 c0       	rjmp	.+430    	; 0x1d8 <__bad_interrupt>
  2a:	00 00       	nop
}
  2c:	12 c4       	rjmp	.+2084   	; 0x852 <__vector_11>
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);									  
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
  2e:	00 00       	nop
				
				*CurrConfigLoc  = ((uint8_t*)*CurrConfigLoc) + CurrDescriptorSize;
  30:	d3 c0       	rjmp	.+422    	; 0x1d8 <__bad_interrupt>
  32:	00 00       	nop
  34:	d1 c0       	rjmp	.+418    	; 0x1d8 <__bad_interrupt>
  36:	00 00       	nop
  38:	cf c0       	rjmp	.+414    	; 0x1d8 <__bad_interrupt>
  3a:	00 00       	nop
				*BytesRem      -= CurrDescriptorSize;
  3c:	cd c0       	rjmp	.+410    	; 0x1d8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	cb c0       	rjmp	.+406    	; 0x1d8 <__bad_interrupt>
  42:	00 00       	nop
  44:	c9 c0       	rjmp	.+402    	; 0x1d8 <__bad_interrupt>
  46:	00 00       	nop
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
				
		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
  48:	c7 c0       	rjmp	.+398    	; 0x1d8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	c5 c0       	rjmp	.+394    	; 0x1d8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	c3 c0       	rjmp	.+390    	; 0x1d8 <__bad_interrupt>
  52:	00 00       	nop
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
  54:	c1 c0       	rjmp	.+386    	; 0x1d8 <__bad_interrupt>
  56:	00 00       	nop
			{
				*CurrConfigLoc = PrevDescLoc;
  58:	bf c0       	rjmp	.+382    	; 0x1d8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	91 c1       	rjmp	.+802    	; 0x380 <__vector_23>
				*BytesRem      = PrevBytesRem;
  5e:	00 00       	nop
  60:	bb c0       	rjmp	.+374    	; 0x1d8 <__bad_interrupt>
  62:	00 00       	nop
		
			return ErrorCode;
		}
	}
	
	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
  64:	b9 c0       	rjmp	.+370    	; 0x1d8 <__bad_interrupt>
}
  66:	00 00       	nop
  68:	b7 c0       	rjmp	.+366    	; 0x1d8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	b5 c0       	rjmp	.+362    	; 0x1d8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	b3 c0       	rjmp	.+358    	; 0x1d8 <__bad_interrupt>
  72:	00 00       	nop
  74:	e8 04       	cpc	r14, r8
  76:	06 05       	cpc	r16, r6
  78:	af 05       	cpc	r26, r15
  7a:	06 05       	cpc	r16, r6
			break;
		case REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
  7c:	af 05       	cpc	r26, r15
  7e:	3b 05       	cpc	r19, r11
  80:	58 05       	cpc	r21, r8
				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
  82:	af 05       	cpc	r26, r15
  84:	77 05       	cpc	r23, r7
  86:	89 05       	cpc	r24, r9

00000088 <ProductString>:
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
  88:	44 03 48 00 61 00 72 00 6d 00 6f 00 6e 00 69 00     D.H.a.r.m.o.n.i.
				Endpoint_ClearIN();
			}
	
			break;
		case REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
  98:	78 00 20 00 47 00 75 00 69 00 74 00 61 00 72 00     x. .G.u.i.t.a.r.
			{				
				Endpoint_ClearSETUP();
				
				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
  a8:	20 00 66 00 6f 00 72 00 20 00 50 00 6c 00 61 00      .f.o.r. .P.l.a.
				Endpoint_ClearStatusStage();
			}
	
			break;
		case REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
  b8:	79 00 53 00 74 00 61 00 74 00 69 00 6f 00 6e 00     y.S.t.a.t.i.o.n.
			{				
				Endpoint_ClearSETUP();
				
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
  c8:	ae 00 33 00 00 00                                   ..3...

000000ce <ManufacturerString>:
  ce:	0a 03 53 00 6f 00 6e 00 79 00 00 00                 ..S.o.n.y...

000000da <LanguageString>:
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
  da:	04 03 09 04                                         ....

000000de <ConfigurationDescriptor>:
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
			  
			MSInterfaceInfo->State.CommandStatus.Status = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo) ?
			                                                                 SCSI_Command_Pass : SCSI_Command_Fail;
			MSInterfaceInfo->State.CommandStatus.Signature           = MS_CSW_SIGNATURE;
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
  de:	09 02 29 00 01 01 00 80 32 09 04 00 00 02 03 00     ..).....2.......
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
  ee:	00 00 09 21 00 01 00 01 22 89 00 07 05 02 03 40     ...!...."......@

			if ((MSInterfaceInfo->State.CommandStatus.Status == SCSI_Command_Fail) &&
  fe:	00 0a 07 05 81 03 40 00 0a                          ......@..

00000107 <DeviceDescriptor>:
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 107:	12 01 10 01 00 00 00 08 ba 12 00 02 13 03 01 02     ................
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 117:	00 01                                               ..

00000119 <JoystickReport>:
 119:	05 01 09 05 a1 01 15 00 25 01 35 00 45 01 75 01     ........%.5.E.u.
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
 129:	95 0d 05 09 19 01 29 0d 81 02 95 03 81 01 05 01     ......).........
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);

	while (Endpoint_IsStalled())
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
 139:	25 07 46 3b 01 75 04 95 01 65 14 09 39 81 42 65     %.F;.u...e..9.Be
		
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}
	
	CallbackIsResetSource = &MSInterfaceInfo->State.IsMassStoreReset;
 149:	00 95 01 81 01 26 ff 00 46 ff 00 09 30 09 31 09     .....&..F...0.1.
	if (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus, sizeof(MS_CommandStatusWrapper_t),
 159:	32 09 35 75 08 95 04 81 02 06 00 ff 09 20 09 21     2.5u......... .!
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 169:	09 22 09 23 09 24 09 25 09 26 09 27 09 28 09 29     .".#.$.%.&.'.(.)
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 179:	09 2a 09 2b 95 0c 81 02 0a 21 26 95 08 b1 02 0a     .*.+.....!&.....
				UERST = 0;
 189:	21 26 91 02 26 ff 03 46 ff 03 09 2c 09 2d 09 2e     !&..&..F...,.-..
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 199:	09 2f 75 10 95 04 81 02 c0                          ./u......

000001a2 <__ctors_end>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 1a2:	11 24       	eor	r1, r1
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 1a4:	1f be       	out	0x3f, r1	; 63
 1a6:	cf ef       	ldi	r28, 0xFF	; 255
 1a8:	d2 e0       	ldi	r29, 0x02	; 2
 1aa:	de bf       	out	0x3e, r29	; 62
 1ac:	cd bf       	out	0x3d, r28	; 61

000001ae <__do_copy_data>:
			
			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 1ae:	11 e0       	ldi	r17, 0x01	; 1
 1b0:	a0 e0       	ldi	r26, 0x00	; 0
 1b2:	b1 e0       	ldi	r27, 0x01	; 1
 1b4:	e8 ea       	ldi	r30, 0xA8	; 168
 1b6:	ff e0       	ldi	r31, 0x0F	; 15
		Endpoint_ResetFIFO(MSInterfaceInfo->Config.DataINEndpointNumber);
		
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <__do_copy_data+0x10>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 1ba:	05 90       	lpm	r0, Z+
 1bc:	0d 92       	st	X+, r0
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 1be:	a0 33       	cpi	r26, 0x30	; 48
 1c0:	b1 07       	cpc	r27, r17
 1c2:	d9 f7       	brne	.-10     	; 0x1ba <__do_copy_data+0xc>

000001c4 <__do_clear_bss>:
 1c4:	21 e0       	ldi	r18, 0x01	; 1
 1c6:	a0 e3       	ldi	r26, 0x30	; 48
			
			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 1c8:	b1 e0       	ldi	r27, 0x01	; 1
 1ca:	01 c0       	rjmp	.+2      	; 0x1ce <.do_clear_bss_start>

000001cc <.do_clear_bss_loop>:
 1cc:	1d 92       	st	X+, r1

000001ce <.do_clear_bss_start>:
 1ce:	ad 3d       	cpi	r26, 0xDD	; 221
 1d0:	b2 07       	cpc	r27, r18
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <.do_clear_bss_loop>
	}
}
 1d4:	48 d0       	rcall	.+144    	; 0x266 <main>
 1d6:	e6 c6       	rjmp	.+3532   	; 0xfa4 <_exit>

000001d8 <__bad_interrupt>:
 1d8:	13 cf       	rjmp	.-474    	; 0x0 <__vectors>

000001da <RingBuffer_Remove.constprop.4>:
 1da:	e0 91 cf 01 	lds	r30, 0x01CF
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
 1de:	f0 91 d0 01 	lds	r31, 0x01D0
 1e2:	81 91       	ld	r24, Z+
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
 1e4:	f0 93 d0 01 	sts	0x01D0, r31
 1e8:	e0 93 cf 01 	sts	0x01CF, r30
 1ec:	ed 5c       	subi	r30, 0xCD	; 205
 1ee:	f1 40       	sbci	r31, 0x01	; 1
 1f0:	31 f4       	brne	.+12     	; 0x1fe <RingBuffer_Remove.constprop.4+0x24>
			  Buffer->Out = Buffer->Buffer;
 1f2:	2d e4       	ldi	r18, 0x4D	; 77
 1f4:	31 e0       	ldi	r19, 0x01	; 1
 1f6:	30 93 d0 01 	sts	0x01D0, r19
 1fa:	20 93 cf 01 	sts	0x01CF, r18

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 1fe:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 200:	f8 94       	cli
			{
				Buffer->Count--;
 202:	90 91 d1 01 	lds	r25, 0x01D1
 206:	91 50       	subi	r25, 0x01	; 1
 208:	90 93 d1 01 	sts	0x01D1, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 20c:	2f bf       	out	0x3f, r18	; 63
			}
			
			return Data;
		}
 20e:	08 95       	ret

00000210 <SetupHardware>:
    }
}

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
 214:	84 b7       	in	r24, 0x34	; 52
 216:	87 7f       	andi	r24, 0xF7	; 247
 218:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
 21a:	88 e1       	ldi	r24, 0x18	; 24
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	f8 94       	cli
 220:	80 93 60 00 	sts	0x0060, r24
 224:	10 92 60 00 	sts	0x0060, r1
 228:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
 22a:	80 e1       	ldi	r24, 0x10	; 16
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	90 93 cd 00 	sts	0x00CD, r25
 232:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
 236:	86 e0       	ldi	r24, 0x06	; 6
 238:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
 23c:	82 e0       	ldi	r24, 0x02	; 2
 23e:	80 93 c8 00 	sts	0x00C8, r24
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
 242:	c9 ec       	ldi	r28, 0xC9	; 201
 244:	d0 e0       	ldi	r29, 0x00	; 0
 246:	88 e1       	ldi	r24, 0x18	; 24
 248:	88 83       	st	Y, r24
				
				DDRD  |= (1 << 3);
 24a:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
 24c:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |= LEDS_ALL_LEDS;
 24e:	8a b1       	in	r24, 0x0a	; 10
 250:	80 63       	ori	r24, 0x30	; 48
 252:	8a b9       	out	0x0a, r24	; 10
				PORTD |= LEDS_ALL_LEDS;
 254:	8b b1       	in	r24, 0x0b	; 11
 256:	80 63       	ori	r24, 0x30	; 48
 258:	8b b9       	out	0x0b, r24	; 11

    /* Hardware Initialization */
    Serial_Init(115200, true);
    LEDs_Init();
    USB_Init();
 25a:	f0 d2       	rcall	.+1504   	; 0x83c <USB_Init>
 25c:	88 e9       	ldi	r24, 0x98	; 152

    UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
 25e:	88 83       	st	Y, r24
 260:	df 91       	pop	r29
}
 262:	cf 91       	pop	r28
 264:	08 95       	ret

00000266 <main>:
 266:	d4 df       	rcall	.-88     	; 0x210 <SetupHardware>
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
    SetupHardware();
 268:	2f b7       	in	r18, 0x3f	; 63
		 *
		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
		 */
		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
		{
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 26a:	f8 94       	cli
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 26c:	8d e4       	ldi	r24, 0x4D	; 77
			{
				Buffer->In  = Buffer->Buffer;
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	90 93 ce 01 	sts	0x01CE, r25
 274:	80 93 cd 01 	sts	0x01CD, r24
 278:	90 93 d0 01 	sts	0x01D0, r25
				Buffer->Out = Buffer->Buffer;
 27c:	80 93 cf 01 	sts	0x01CF, r24
 280:	2f bf       	out	0x3f, r18	; 63
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 282:	78 94       	sei

    RingBuffer_InitBuffer(&USARTtoUSB_Buffer);

    sei();
 284:	83 e2       	ldi	r24, 0x23	; 35

    for (;;) {
	HID_Device_USBTask(&Joystick_HID_Interface);
 286:	91 e0       	ldi	r25, 0x01	; 1
 288:	c1 d5       	rcall	.+2946   	; 0xe0c <HID_Device_USBTask>
 28a:	72 d4       	rcall	.+2276   	; 0xb70 <USB_USBTask>
 28c:	80 91 30 01 	lds	r24, 0x0130
	USB_USBTask();
 290:	90 91 31 01 	lds	r25, 0x0131

	/* Turn off the Tx LED when the tick count reaches zero */
	if (led1_ticks) {
 294:	89 2b       	or	r24, r25
 296:	b1 f3       	breq	.-20     	; 0x284 <main+0x1e>
 298:	80 91 30 01 	lds	r24, 0x0130
 29c:	90 91 31 01 	lds	r25, 0x0131
	    led1_ticks--;
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	90 93 31 01 	sts	0x0131, r25
 2a6:	80 93 30 01 	sts	0x0130, r24
 2aa:	80 91 30 01 	lds	r24, 0x0130
 2ae:	90 91 31 01 	lds	r25, 0x0131
	    if (led1_ticks == 0) {
 2b2:	89 2b       	or	r24, r25
 2b4:	39 f7       	brne	.-50     	; 0x284 <main+0x1e>
 2b6:	5d 9a       	sbi	0x0b, 5	; 11
 2b8:	e5 cf       	rjmp	.-54     	; 0x284 <main+0x1e>

000002ba <EVENT_USB_Device_Connect>:
 2ba:	08 95       	ret

000002bc <EVENT_USB_Device_Disconnect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
			{
				PORTD |= LEDMask;
 2bc:	08 95       	ret

000002be <EVENT_USB_Device_ConfigurationChanged>:
 2be:	83 e2       	ldi	r24, 0x23	; 35
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
    HID_Device_ConfigureEndpoints(&Joystick_HID_Interface);
 2c0:	91 e0       	ldi	r25, 0x01	; 1
 2c2:	81 d5       	rcall	.+2818   	; 0xdc6 <HID_Device_ConfigureEndpoints>
 2c4:	e2 ee       	ldi	r30, 0xE2	; 226
			 *  at the start of each USB frame when enumerated in device mode.
			 */
			static inline void USB_Device_EnableSOFEvents(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableSOFEvents(void)
			{
				USB_INT_Enable(USB_INT_SOFI);
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	80 81       	ld	r24, Z
 2ca:	84 60       	ori	r24, 0x04	; 4
 2cc:	80 83       	st	Z, r24
 2ce:	08 95       	ret

000002d0 <EVENT_USB_Device_UnhandledControlRequest>:
 2d0:	83 e2       	ldi	r24, 0x23	; 35
}

/** Event handler for the library USB Unhandled Control Request event. */
void EVENT_USB_Device_UnhandledControlRequest(void)
{
    HID_Device_ProcessControlRequest(&Joystick_HID_Interface);
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	5e c4       	rjmp	.+2236   	; 0xb92 <HID_Device_ProcessControlRequest>

000002d6 <EVENT_USB_Device_StartOfFrame>:
 2d6:	80 91 2e 01 	lds	r24, 0x012E
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
 2da:	90 91 2f 01 	lds	r25, 0x012F
 2de:	00 97       	sbiw	r24, 0x00	; 0
 2e0:	29 f0       	breq	.+10     	; 0x2ec <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
 2e2:	01 97       	sbiw	r24, 0x01	; 1
 2e4:	90 93 2f 01 	sts	0x012F, r25
 2e8:	80 93 2e 01 	sts	0x012E, r24
 2ec:	08 95       	ret

000002ee <CALLBACK_HID_Device_CreateHIDReport>:
    USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
    uint8_t* const ReportID,
    const uint8_t ReportType,
    void* ReportData,
    uint16_t* const ReportSize)
{
 2ee:	ef 92       	push	r14
 2f0:	ff 92       	push	r15
 2f2:	0f 93       	push	r16
 2f4:	1f 93       	push	r17
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	79 01       	movw	r14, r18
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 2fc:	9f b7       	in	r25, 0x3f	; 63
if(ReportType == 2) { //HID_REPORT_ITEM_Feature
 2fe:	42 30       	cpi	r20, 0x02	; 2
 300:	d1 f4       	brne	.+52     	; 0x336 <__stack+0x37>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 302:	f8 94       	cli
			{
				Count = Buffer->Count;
 304:	80 91 d1 01 	lds	r24, 0x01D1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 308:	9f bf       	out	0x3f, r25	; 63
   USB_JoystickReport_Data_t_GetFeature *reportp = (USB_JoystickReport_Data_t_GetFeature*)ReportData;
    RingBuff_Count_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);

    if (BufferCount >= (sizeof(joyReportBack) + 1)) {
 30a:	89 30       	cpi	r24, 0x09	; 9
 30c:	48 f0       	brcs	.+18     	; 0x320 <__stack+0x21>
 30e:	c0 e0       	ldi	r28, 0x00	; 0
 310:	d1 e0       	ldi	r29, 0x01	; 1
	uint8_t ind;
	for (ind=0; ind<sizeof(joyReportBack); ind++) {
	    ((uint8_t *)&joyReportBack)[ind] = RingBuffer_Remove(&USARTtoUSB_Buffer);
 312:	63 df       	rcall	.-314    	; 0x1da <RingBuffer_Remove.constprop.4>
 314:	89 93       	st	Y+, r24
 316:	81 e0       	ldi	r24, 0x01	; 1
   USB_JoystickReport_Data_t_GetFeature *reportp = (USB_JoystickReport_Data_t_GetFeature*)ReportData;
    RingBuff_Count_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);

    if (BufferCount >= (sizeof(joyReportBack) + 1)) {
	uint8_t ind;
	for (ind=0; ind<sizeof(joyReportBack); ind++) {
 318:	c8 30       	cpi	r28, 0x08	; 8
 31a:	d8 07       	cpc	r29, r24
 31c:	d1 f7       	brne	.-12     	; 0x312 <__stack+0x13>
 31e:	5d df       	rcall	.-326    	; 0x1da <RingBuffer_Remove.constprop.4>
	    ((uint8_t *)&joyReportBack)[ind] = RingBuffer_Remove(&USARTtoUSB_Buffer);
	}

	/* Remove spacer */
	RingBuffer_Remove(&USARTtoUSB_Buffer);
 320:	88 e0       	ldi	r24, 0x08	; 8
 322:	e0 e0       	ldi	r30, 0x00	; 0

	//LEDs_TurnOnLEDs(LEDS_LED1);
	//led1_ticks = LED_ON_TICKS;
    }

    *reportp = joyReportBack;
 324:	f1 e0       	ldi	r31, 0x01	; 1
 326:	d7 01       	movw	r26, r14
 328:	01 90       	ld	r0, Z+
 32a:	0d 92       	st	X+, r0
 32c:	8a 95       	dec	r24
 32e:	e1 f7       	brne	.-8      	; 0x328 <__stack+0x29>
 330:	88 e0       	ldi	r24, 0x08	; 8
 332:	90 e0       	ldi	r25, 0x00	; 0
    *ReportSize = sizeof(USB_JoystickReport_Data_t_GetFeature);
 334:	19 c0       	rjmp	.+50     	; 0x368 <__stack+0x69>
 336:	f8 94       	cli
 338:	80 91 d1 01 	lds	r24, 0x01D1
 33c:	9f bf       	out	0x3f, r25	; 63
 33e:	8c 31       	cpi	r24, 0x1C	; 28
 340:	48 f0       	brcs	.+18     	; 0x354 <__stack+0x55>
} else {
    USB_JoystickReport_Data_t *reportp = (USB_JoystickReport_Data_t*)ReportData;
    RingBuff_Count_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);

    if (BufferCount >= (sizeof(joyReport) + 1)) {
 342:	c8 e0       	ldi	r28, 0x08	; 8
 344:	d1 e0       	ldi	r29, 0x01	; 1
 346:	49 df       	rcall	.-366    	; 0x1da <RingBuffer_Remove.constprop.4>
 348:	89 93       	st	Y+, r24
	uint8_t ind;
	for (ind=0; ind<sizeof(joyReport); ind++) {
	    ((uint8_t *)&joyReport)[ind] = RingBuffer_Remove(&USARTtoUSB_Buffer);
 34a:	f1 e0       	ldi	r31, 0x01	; 1
 34c:	c3 32       	cpi	r28, 0x23	; 35
 34e:	df 07       	cpc	r29, r31
    USB_JoystickReport_Data_t *reportp = (USB_JoystickReport_Data_t*)ReportData;
    RingBuff_Count_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);

    if (BufferCount >= (sizeof(joyReport) + 1)) {
	uint8_t ind;
	for (ind=0; ind<sizeof(joyReport); ind++) {
 350:	d1 f7       	brne	.-12     	; 0x346 <__stack+0x47>
 352:	43 df       	rcall	.-378    	; 0x1da <RingBuffer_Remove.constprop.4>
 354:	8b e1       	ldi	r24, 0x1B	; 27
 356:	e8 e0       	ldi	r30, 0x08	; 8
	    ((uint8_t *)&joyReport)[ind] = RingBuffer_Remove(&USARTtoUSB_Buffer);
	}

	/* Remove spacer */
	RingBuffer_Remove(&USARTtoUSB_Buffer);
 358:	f1 e0       	ldi	r31, 0x01	; 1
 35a:	d7 01       	movw	r26, r14

	//LEDs_TurnOnLEDs(LEDS_LED1);
	//led1_ticks = LED_ON_TICKS;
    }

    *reportp = joyReport;
 35c:	01 90       	ld	r0, Z+
 35e:	0d 92       	st	X+, r0
 360:	8a 95       	dec	r24
 362:	e1 f7       	brne	.-8      	; 0x35c <__stack+0x5d>
 364:	8b e1       	ldi	r24, 0x1B	; 27
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	f8 01       	movw	r30, r16
 36a:	91 83       	std	Z+1, r25	; 0x01
    *ReportSize = sizeof(USB_JoystickReport_Data_t);
 36c:	80 83       	st	Z, r24
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	1f 91       	pop	r17
}
    return true; //Was false
}
 376:	0f 91       	pop	r16
 378:	ff 90       	pop	r15
 37a:	ef 90       	pop	r14
 37c:	08 95       	ret

0000037e <CALLBACK_HID_Device_ProcessHIDReport>:
 37e:	08 95       	ret

00000380 <__vector_23>:
 380:	1f 92       	push	r1
 382:	0f 92       	push	r0
 384:	0f b6       	in	r0, 0x3f	; 63

/** ISR to manage the reception of data from the serial port, placing received bytes into a circular buffer
 *  for later transmission to the host.
 */
ISR(USART1_RX_vect, ISR_BLOCK)
{
 386:	0f 92       	push	r0
 388:	11 24       	eor	r1, r1
 38a:	2f 93       	push	r18
 38c:	8f 93       	push	r24
 38e:	9f 93       	push	r25
 390:	ef 93       	push	r30
 392:	ff 93       	push	r31
    uint8_t ReceivedByte = UDR1;
 394:	80 91 ce 00 	lds	r24, 0x00CE

    if ((USB_DeviceState == DEVICE_STATE_Configured) &&
 398:	9e b3       	in	r25, 0x1e	; 30
 39a:	94 30       	cpi	r25, 0x04	; 4
 39c:	29 f5       	brne	.+74     	; 0x3e8 <__vector_23+0x68>
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 39e:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 3a0:	f8 94       	cli
			{
				Count = Buffer->Count;
 3a2:	90 91 d1 01 	lds	r25, 0x01D1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 3a6:	2f bf       	out	0x3f, r18	; 63
 3a8:	90 38       	cpi	r25, 0x80	; 128
 3aa:	f1 f0       	breq	.+60     	; 0x3e8 <__vector_23+0x68>
		 *  \param[in]     Data    Data element to insert into the buffer
		 */
		static inline void RingBuffer_Insert(RingBuff_t* const Buffer,
		                                     const RingBuff_Data_t Data)
		{
			*Buffer->In = Data;
 3ac:	e0 91 cd 01 	lds	r30, 0x01CD
 3b0:	f0 91 ce 01 	lds	r31, 0x01CE
 3b4:	80 83       	st	Z, r24
			
			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
 3b6:	e0 91 cd 01 	lds	r30, 0x01CD
 3ba:	f0 91 ce 01 	lds	r31, 0x01CE
 3be:	cf 01       	movw	r24, r30
 3c0:	01 96       	adiw	r24, 0x01	; 1
 3c2:	90 93 ce 01 	sts	0x01CE, r25
 3c6:	80 93 cd 01 	sts	0x01CD, r24
 3ca:	8d 5c       	subi	r24, 0xCD	; 205
 3cc:	91 40       	sbci	r25, 0x01	; 1
 3ce:	21 f4       	brne	.+8      	; 0x3d8 <__vector_23+0x58>
			  Buffer->In = Buffer->Buffer;
 3d0:	8d e4       	ldi	r24, 0x4D	; 77
 3d2:	91 e0       	ldi	r25, 0x01	; 1
 3d4:	92 83       	std	Z+2, r25	; 0x02
 3d6:	81 83       	std	Z+1, r24	; 0x01

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 3d8:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 3da:	f8 94       	cli
			{
				Buffer->Count++;
 3dc:	80 91 d1 01 	lds	r24, 0x01D1
 3e0:	8f 5f       	subi	r24, 0xFF	; 255
 3e2:	80 93 d1 01 	sts	0x01D1, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 3e6:	9f bf       	out	0x3f, r25	; 63
	    !RingBuffer_IsFull(&USARTtoUSB_Buffer)) {
	RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
    }
}
 3e8:	ff 91       	pop	r31
 3ea:	ef 91       	pop	r30
 3ec:	9f 91       	pop	r25
 3ee:	8f 91       	pop	r24
 3f0:	2f 91       	pop	r18
 3f2:	0f 90       	pop	r0
 3f4:	0f be       	out	0x3f, r0	; 63
 3f6:	0f 90       	pop	r0
 3f8:	1f 90       	pop	r1
 3fa:	18 95       	reti

000003fc <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
 3fc:	29 2f       	mov	r18, r25
 3fe:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 400:	23 30       	cpi	r18, 0x03	; 3
 402:	31 05       	cpc	r19, r1
 404:	b9 f0       	breq	.+46     	; 0x434 <CALLBACK_USB_GetDescriptor+0x38>
 406:	5c f4       	brge	.+22     	; 0x41e <CALLBACK_USB_GetDescriptor+0x22>
 408:	21 30       	cpi	r18, 0x01	; 1
 40a:	31 05       	cpc	r19, r1
 40c:	69 f1       	breq	.+90     	; 0x468 <CALLBACK_USB_GetDescriptor+0x6c>
 40e:	22 30       	cpi	r18, 0x02	; 2
 410:	31 05       	cpc	r19, r1
 412:	79 f5       	brne	.+94     	; 0x472 <CALLBACK_USB_GetDescriptor+0x76>
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration: 
			Address = (void*)&ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 414:	89 e2       	ldi	r24, 0x29	; 41
 416:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration: 
			Address = (void*)&ConfigurationDescriptor;
 418:	2e ed       	ldi	r18, 0xDE	; 222
 41a:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 41c:	2e c0       	rjmp	.+92     	; 0x47a <CALLBACK_USB_GetDescriptor+0x7e>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 41e:	21 32       	cpi	r18, 0x21	; 33
 420:	31 05       	cpc	r19, r1
 422:	e9 f0       	breq	.+58     	; 0x45e <CALLBACK_USB_GetDescriptor+0x62>
 424:	22 32       	cpi	r18, 0x22	; 34
 426:	31 05       	cpc	r19, r1
 428:	21 f5       	brne	.+72     	; 0x472 <CALLBACK_USB_GetDescriptor+0x76>
			Address = (void*)&ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_t);
			break;
		case DTYPE_Report: 
			Address = (void*)&JoystickReport;
			Size    = sizeof(JoystickReport);
 42a:	89 e8       	ldi	r24, 0x89	; 137
 42c:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_HID: 
			Address = (void*)&ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_t);
			break;
		case DTYPE_Report: 
			Address = (void*)&JoystickReport;
 42e:	29 e1       	ldi	r18, 0x19	; 25
 430:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(JoystickReport);
			break;
 432:	23 c0       	rjmp	.+70     	; 0x47a <CALLBACK_USB_GetDescriptor+0x7e>
 434:	99 27       	eor	r25, r25
		case DTYPE_Configuration: 
			Address = (void*)&ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String: 
			switch (DescriptorNumber)
 436:	81 30       	cpi	r24, 0x01	; 1
 438:	91 05       	cpc	r25, r1
 43a:	41 f0       	breq	.+16     	; 0x44c <CALLBACK_USB_GetDescriptor+0x50>
 43c:	82 30       	cpi	r24, 0x02	; 2
 43e:	91 05       	cpc	r25, r1
 440:	41 f0       	breq	.+16     	; 0x452 <CALLBACK_USB_GetDescriptor+0x56>
 442:	89 2b       	or	r24, r25
 444:	b1 f4       	brne	.+44     	; 0x472 <CALLBACK_USB_GetDescriptor+0x76>
			{
				case 0x00: 
					Address = (void*)&LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 446:	ea ed       	ldi	r30, 0xDA	; 218
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	05 c0       	rjmp	.+10     	; 0x456 <CALLBACK_USB_GetDescriptor+0x5a>
					break;
				case 0x01: 
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 44c:	ee ec       	ldi	r30, 0xCE	; 206
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	02 c0       	rjmp	.+4      	; 0x456 <CALLBACK_USB_GetDescriptor+0x5a>
					break;
				case 0x02: 
					Address = (void*)&ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 452:	e8 e8       	ldi	r30, 0x88	; 136
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	84 91       	lpm	r24, Z
 458:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01: 
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02: 
					Address = (void*)&ProductString;
 45a:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 45c:	0e c0       	rjmp	.+28     	; 0x47a <CALLBACK_USB_GetDescriptor+0x7e>
			}
			
			break;
		case DTYPE_HID: 
			Address = (void*)&ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_t);
 45e:	89 e0       	ldi	r24, 0x09	; 9
 460:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}
			
			break;
		case DTYPE_HID: 
			Address = (void*)&ConfigurationDescriptor.HID_JoystickHID;
 462:	20 ef       	ldi	r18, 0xF0	; 240
 464:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_HID_Descriptor_t);
			break;
 466:	09 c0       	rjmp	.+18     	; 0x47a <CALLBACK_USB_GetDescriptor+0x7e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 468:	82 e1       	ldi	r24, 0x12	; 18
 46a:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = (void*)&DeviceDescriptor;
 46c:	27 e0       	ldi	r18, 0x07	; 7
 46e:	31 e0       	ldi	r19, 0x01	; 1
 470:	04 c0       	rjmp	.+8      	; 0x47a <CALLBACK_USB_GetDescriptor+0x7e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	90 e0       	ldi	r25, 0x00	; 0
                                    void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
 476:	20 e0       	ldi	r18, 0x00	; 0
 478:	30 e0       	ldi	r19, 0x00	; 0
			Address = (void*)&JoystickReport;
			Size    = sizeof(JoystickReport);
			break;
	}
	
	*DescriptorAddress = Address;
 47a:	fa 01       	movw	r30, r20
 47c:	31 83       	std	Z+1, r19	; 0x01
 47e:	20 83       	st	Z, r18
	return Size;
}
 480:	08 95       	ret

00000482 <Endpoint_BytesToEPSizeMaskDynamic>:
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
 482:	28 e0       	ldi	r18, 0x08	; 8
 484:	30 e0       	ldi	r19, 0x00	; 0

		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
 486:	40 e0       	ldi	r20, 0x00	; 0
				uint16_t CheckBytes = 8;
				
				while (CheckBytes < Bytes)
 488:	28 17       	cp	r18, r24
 48a:	39 07       	cpc	r19, r25
 48c:	20 f4       	brcc	.+8      	; 0x496 <Endpoint_BytesToEPSizeMaskDynamic+0x14>
				{
					MaskVal++;
 48e:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
 490:	22 0f       	add	r18, r18
 492:	33 1f       	adc	r19, r19
 494:	f9 cf       	rjmp	.-14     	; 0x488 <Endpoint_BytesToEPSizeMaskDynamic+0x6>
#endif

uint8_t Endpoint_BytesToEPSizeMaskDynamic(const uint16_t Size)
{
	return Endpoint_BytesToEPSizeMask(Size);
}
 496:	84 2f       	mov	r24, r20
 498:	82 95       	swap	r24
 49a:	80 7f       	andi	r24, 0xF0	; 240
 49c:	08 95       	ret

0000049e <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 49e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 4a2:	eb ee       	ldi	r30, 0xEB	; 235
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	80 81       	ld	r24, Z
 4a8:	81 60       	ori	r24, 0x01	; 1
 4aa:	80 83       	st	Z, r24
                                    const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
 4ac:	ed ee       	ldi	r30, 0xED	; 237
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	10 82       	st	Z, r1

	UECFG0X = UECFG0XData;
 4b2:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
 4b6:	40 83       	st	Z, r20
			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 4b8:	80 91 ee 00 	lds	r24, 0x00EE

	return Endpoint_IsConfigured();
}
 4bc:	88 1f       	adc	r24, r24
 4be:	88 27       	eor	r24, r24
 4c0:	88 1f       	adc	r24, r24
 4c2:	08 95       	ret

000004c4 <Endpoint_ClearEndpoints>:

void Endpoint_ClearEndpoints(void)
{
	UEINT = 0;
 4c4:	10 92 f4 00 	sts	0x00F4, r1

	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 4c8:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 4ca:	80 93 e9 00 	sts	0x00E9, r24
	{
		Endpoint_SelectEndpoint(EPNum);	
		UEIENX  = 0;
 4ce:	10 92 f0 00 	sts	0x00F0, r1
		UEINTX  = 0;
 4d2:	10 92 e8 00 	sts	0x00E8, r1
		UECFG1X = 0;
 4d6:	10 92 ed 00 	sts	0x00ED, r1
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 4da:	90 91 eb 00 	lds	r25, 0x00EB
 4de:	9e 7f       	andi	r25, 0xFE	; 254
 4e0:	90 93 eb 00 	sts	0x00EB, r25

void Endpoint_ClearEndpoints(void)
{
	UEINT = 0;

	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 4e4:	8f 5f       	subi	r24, 0xFF	; 255
 4e6:	85 30       	cpi	r24, 0x05	; 5
 4e8:	81 f7       	brne	.-32     	; 0x4ca <Endpoint_ClearEndpoints+0x6>
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 4ea:	08 95       	ret

000004ec <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 4ec:	80 91 d5 01 	lds	r24, 0x01D5
 4f0:	87 fd       	sbrc	r24, 7
 4f2:	05 c0       	rjmp	.+10     	; 0x4fe <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
 4f4:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 4f8:	80 ff       	sbrs	r24, 0
 4fa:	0d c0       	rjmp	.+26     	; 0x516 <Endpoint_ClearStatusStage+0x2a>
 4fc:	10 c0       	rjmp	.+32     	; 0x51e <Endpoint_ClearStatusStage+0x32>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 4fe:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 502:	82 fd       	sbrc	r24, 2
 504:	04 c0       	rjmp	.+8      	; 0x50e <Endpoint_ClearStatusStage+0x22>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 506:	8e b3       	in	r24, 0x1e	; 30
 508:	81 11       	cpse	r24, r1
 50a:	f9 cf       	rjmp	.-14     	; 0x4fe <Endpoint_ClearStatusStage+0x12>
 50c:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 50e:	80 91 e8 00 	lds	r24, 0x00E8
 512:	8b 77       	andi	r24, 0x7B	; 123
 514:	07 c0       	rjmp	.+14     	; 0x524 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 516:	8e b3       	in	r24, 0x1e	; 30
 518:	81 11       	cpse	r24, r1
 51a:	ec cf       	rjmp	.-40     	; 0x4f4 <Endpoint_ClearStatusStage+0x8>
 51c:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 51e:	80 91 e8 00 	lds	r24, 0x00E8
 522:	8e 77       	andi	r24, 0x7E	; 126
 524:	80 93 e8 00 	sts	0x00E8, r24
 528:	08 95       	ret

0000052a <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
 52a:	85 e6       	ldi	r24, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
 52c:	90 91 ec 00 	lds	r25, 0x00EC
	uint16_t TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
	#endif

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 530:	90 ff       	sbrs	r25, 0
 532:	05 c0       	rjmp	.+10     	; 0x53e <Endpoint_WaitUntilReady+0x14>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
 534:	90 91 e8 00 	lds	r25, 0x00E8
		{
			if (Endpoint_IsINReady())
 538:	90 ff       	sbrs	r25, 0
 53a:	05 c0       	rjmp	.+10     	; 0x546 <Endpoint_WaitUntilReady+0x1c>
 53c:	1b c0       	rjmp	.+54     	; 0x574 <Endpoint_WaitUntilReady+0x4a>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 53e:	90 91 e8 00 	lds	r25, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 542:	92 fd       	sbrc	r25, 2
 544:	17 c0       	rjmp	.+46     	; 0x574 <Endpoint_WaitUntilReady+0x4a>
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 546:	9e b3       	in	r25, 0x1e	; 30
 548:	99 23       	and	r25, r25
 54a:	b1 f0       	breq	.+44     	; 0x578 <Endpoint_WaitUntilReady+0x4e>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 54c:	9e b3       	in	r25, 0x1e	; 30
 54e:	95 30       	cpi	r25, 0x05	; 5
 550:	a9 f0       	breq	.+42     	; 0x57c <Endpoint_WaitUntilReady+0x52>
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 552:	90 91 eb 00 	lds	r25, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 556:	95 fd       	sbrc	r25, 5
 558:	13 c0       	rjmp	.+38     	; 0x580 <Endpoint_WaitUntilReady+0x56>
		  return ENDPOINT_READYWAIT_EndpointStalled;
			  
		if (USB_INT_HasOccurred(USB_INT_SOFI))
 55a:	90 91 e1 00 	lds	r25, 0x00E1
 55e:	92 ff       	sbrs	r25, 2
 560:	e5 cf       	rjmp	.-54     	; 0x52c <Endpoint_WaitUntilReady+0x2>
		{
			USB_INT_Clear(USB_INT_SOFI);
 562:	90 91 e1 00 	lds	r25, 0x00E1
 566:	9b 7f       	andi	r25, 0xFB	; 251
 568:	90 93 e1 00 	sts	0x00E1, r25
 56c:	81 50       	subi	r24, 0x01	; 1

			if (!(TimeoutMSRem--))
 56e:	f1 f6       	brne	.-68     	; 0x52c <Endpoint_WaitUntilReady+0x2>
			  return ENDPOINT_READYWAIT_Timeout;
 570:	84 e0       	ldi	r24, 0x04	; 4
		}
	}
}
 572:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	08 95       	ret
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 578:	82 e0       	ldi	r24, 0x02	; 2
 57a:	08 95       	ret
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 57c:	83 e0       	ldi	r24, 0x03	; 3
 57e:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	08 95       	ret

00000584 <Endpoint_Write_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
 584:	ef 92       	push	r14
 586:	ff 92       	push	r15
 588:	0f 93       	push	r16
 58a:	1f 93       	push	r17
 58c:	cf 93       	push	r28
 58e:	df 93       	push	r29
 590:	ec 01       	movw	r28, r24
 592:	8b 01       	movw	r16, r22
 594:	7a 01       	movw	r14, r20
			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
			  return ENDPOINT_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 596:	c9 df       	rcall	.-110    	; 0x52a <Endpoint_WaitUntilReady>
 598:	81 11       	cpse	r24, r1
 59a:	1d c0       	rjmp	.+58     	; 0x5d6 <Endpoint_Write_Stream_LE+0x52>
 59c:	01 15       	cp	r16, r1
				} while (Length >= 8);	
		}
	}
	#endif

	while (Length)
 59e:	11 05       	cpc	r17, r1
 5a0:	c9 f0       	breq	.+50     	; 0x5d4 <Endpoint_Write_Stream_LE+0x50>
 5a2:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 5a6:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 5a8:	0e c0       	rjmp	.+28     	; 0x5c6 <Endpoint_Write_Stream_LE+0x42>
 5aa:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 5ae:	8e 77       	andi	r24, 0x7E	; 126
 5b0:	80 93 e8 00 	sts	0x00E8, r24
 5b4:	e1 14       	cp	r14, r1
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
 5b6:	f1 04       	cpc	r15, r1
 5b8:	71 f3       	breq	.-36     	; 0x596 <Endpoint_Write_Stream_LE+0x12>
 5ba:	f7 01       	movw	r30, r14
 5bc:	09 95       	icall
 5be:	81 30       	cpi	r24, 0x01	; 1
 5c0:	51 f7       	brne	.-44     	; 0x596 <Endpoint_Write_Stream_LE+0x12>
 5c2:	85 e0       	ldi	r24, 0x05	; 5
			  return ENDPOINT_RWSTREAM_CallbackAborted;
 5c4:	08 c0       	rjmp	.+16     	; 0x5d6 <Endpoint_Write_Stream_LE+0x52>
 5c6:	88 81       	ld	r24, Y
			if ((ErrorCode = Endpoint_WaitUntilReady()))
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 5c8:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 5cc:	01 50       	subi	r16, 0x01	; 1
			Length--;
 5ce:	11 09       	sbc	r17, r1
 5d0:	21 96       	adiw	r28, 0x01	; 1
			if ((ErrorCode = Endpoint_WaitUntilReady()))
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 5d2:	e4 cf       	rjmp	.-56     	; 0x59c <Endpoint_Write_Stream_LE+0x18>
 5d4:	80 e0       	ldi	r24, 0x00	; 0
			Length--;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
 5d6:	df 91       	pop	r29
}
 5d8:	cf 91       	pop	r28
 5da:	1f 91       	pop	r17
 5dc:	0f 91       	pop	r16
 5de:	ff 90       	pop	r15
 5e0:	ef 90       	pop	r14
 5e2:	08 95       	ret

000005e4 <Endpoint_Write_Control_Stream_LE>:
 5e4:	20 91 db 01 	lds	r18, 0x01DB
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;
	
	if (Length > USB_ControlRequest.wLength)
 5e8:	30 91 dc 01 	lds	r19, 0x01DC
 5ec:	26 17       	cp	r18, r22
 5ee:	37 07       	cpc	r19, r23
 5f0:	48 f0       	brcs	.+18     	; 0x604 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 5f2:	61 15       	cp	r22, r1
 5f4:	71 05       	cpc	r23, r1
 5f6:	39 f4       	brne	.+14     	; 0x606 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 5f8:	20 91 e8 00 	lds	r18, 0x00E8
 5fc:	2e 77       	andi	r18, 0x7E	; 126
 5fe:	20 93 e8 00 	sts	0x00E8, r18
 602:	01 c0       	rjmp	.+2      	; 0x606 <Endpoint_Write_Control_Stream_LE+0x22>
 604:	b9 01       	movw	r22, r18
 606:	30 e0       	ldi	r19, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 608:	61 15       	cp	r22, r1
 60a:	71 05       	cpc	r23, r1
 60c:	91 f1       	breq	.+100    	; 0x672 <Endpoint_Write_Control_Stream_LE+0x8e>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 60e:	20 91 e8 00 	lds	r18, 0x00E8
	{
		if (Endpoint_IsSETUPReceived())
 612:	23 fd       	sbrc	r18, 3
 614:	38 c0       	rjmp	.+112    	; 0x686 <Endpoint_Write_Control_Stream_LE+0xa2>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 616:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
 61a:	22 ff       	sbrs	r18, 2
 61c:	06 c0       	rjmp	.+12     	; 0x62a <Endpoint_Write_Control_Stream_LE+0x46>
 61e:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
 622:	82 ff       	sbrs	r24, 2
 624:	29 c0       	rjmp	.+82     	; 0x678 <Endpoint_Write_Control_Stream_LE+0x94>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 626:	80 e0       	ldi	r24, 0x00	; 0
 628:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 62a:	2e b3       	in	r18, 0x1e	; 30
 62c:	22 23       	and	r18, r18
 62e:	69 f1       	breq	.+90     	; 0x68a <Endpoint_Write_Control_Stream_LE+0xa6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 630:	2e b3       	in	r18, 0x1e	; 30
 632:	25 30       	cpi	r18, 0x05	; 5
 634:	61 f1       	breq	.+88     	; 0x68e <Endpoint_Write_Control_Stream_LE+0xaa>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
 636:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsINReady())
 63a:	20 ff       	sbrs	r18, 0
 63c:	e5 cf       	rjmp	.-54     	; 0x608 <Endpoint_Write_Control_Stream_LE+0x24>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 63e:	20 91 f2 00 	lds	r18, 0x00F2
 642:	fc 01       	movw	r30, r24
 644:	cf 01       	movw	r24, r30
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 646:	61 15       	cp	r22, r1
 648:	71 05       	cpc	r23, r1
 64a:	49 f0       	breq	.+18     	; 0x65e <Endpoint_Write_Control_Stream_LE+0x7a>
 64c:	28 30       	cpi	r18, 0x08	; 8
 64e:	38 f4       	brcc	.+14     	; 0x65e <Endpoint_Write_Control_Stream_LE+0x7a>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 650:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 652:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
 656:	61 50       	subi	r22, 0x01	; 1
 658:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 65a:	2f 5f       	subi	r18, 0xFF	; 255
 65c:	f3 cf       	rjmp	.-26     	; 0x644 <Endpoint_Write_Control_Stream_LE+0x60>
			}
			
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 65e:	31 e0       	ldi	r19, 0x01	; 1
 660:	28 30       	cpi	r18, 0x08	; 8
 662:	09 f0       	breq	.+2      	; 0x666 <Endpoint_Write_Control_Stream_LE+0x82>
 664:	30 e0       	ldi	r19, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 666:	20 91 e8 00 	lds	r18, 0x00E8
 66a:	2e 77       	andi	r18, 0x7E	; 126
 66c:	20 93 e8 00 	sts	0x00E8, r18
 670:	cb cf       	rjmp	.-106    	; 0x608 <Endpoint_Write_Control_Stream_LE+0x24>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 672:	31 11       	cpse	r19, r1
 674:	cc cf       	rjmp	.-104    	; 0x60e <Endpoint_Write_Control_Stream_LE+0x2a>
 676:	d3 cf       	rjmp	.-90     	; 0x61e <Endpoint_Write_Control_Stream_LE+0x3a>
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 678:	8e b3       	in	r24, 0x1e	; 30
 67a:	88 23       	and	r24, r24
 67c:	31 f0       	breq	.+12     	; 0x68a <Endpoint_Write_Control_Stream_LE+0xa6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 67e:	8e b3       	in	r24, 0x1e	; 30
 680:	85 30       	cpi	r24, 0x05	; 5
 682:	69 f6       	brne	.-102    	; 0x61e <Endpoint_Write_Control_Stream_LE+0x3a>
 684:	04 c0       	rjmp	.+8      	; 0x68e <Endpoint_Write_Control_Stream_LE+0xaa>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	08 95       	ret

		if (Endpoint_IsOUTReceived())
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 68a:	82 e0       	ldi	r24, 0x02	; 2
 68c:	08 95       	ret
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 68e:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 690:	08 95       	ret

00000692 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;
	
	if (Length > USB_ControlRequest.wLength)
 692:	20 91 db 01 	lds	r18, 0x01DB
 696:	30 91 dc 01 	lds	r19, 0x01DC
 69a:	26 17       	cp	r18, r22
 69c:	37 07       	cpc	r19, r23
 69e:	48 f0       	brcs	.+18     	; 0x6b2 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 6a0:	61 15       	cp	r22, r1
 6a2:	71 05       	cpc	r23, r1
 6a4:	39 f4       	brne	.+14     	; 0x6b4 <Endpoint_Write_Control_PStream_LE+0x22>
 6a6:	20 91 e8 00 	lds	r18, 0x00E8
 6aa:	2e 77       	andi	r18, 0x7E	; 126
 6ac:	20 93 e8 00 	sts	0x00E8, r18
 6b0:	01 c0       	rjmp	.+2      	; 0x6b4 <Endpoint_Write_Control_PStream_LE+0x22>
 6b2:	b9 01       	movw	r22, r18
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 6b4:	30 e0       	ldi	r19, 0x00	; 0
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 6b6:	61 15       	cp	r22, r1
 6b8:	71 05       	cpc	r23, r1
 6ba:	99 f1       	breq	.+102    	; 0x722 <Endpoint_Write_Control_PStream_LE+0x90>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 6bc:	20 91 e8 00 	lds	r18, 0x00E8
	{
		if (Endpoint_IsSETUPReceived())
 6c0:	23 fd       	sbrc	r18, 3
 6c2:	39 c0       	rjmp	.+114    	; 0x736 <Endpoint_Write_Control_PStream_LE+0xa4>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 6c4:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
 6c8:	22 ff       	sbrs	r18, 2
 6ca:	06 c0       	rjmp	.+12     	; 0x6d8 <Endpoint_Write_Control_PStream_LE+0x46>
 6cc:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
 6d0:	82 ff       	sbrs	r24, 2
 6d2:	2a c0       	rjmp	.+84     	; 0x728 <Endpoint_Write_Control_PStream_LE+0x96>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 6d4:	80 e0       	ldi	r24, 0x00	; 0
 6d6:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 6d8:	2e b3       	in	r18, 0x1e	; 30
 6da:	22 23       	and	r18, r18
 6dc:	71 f1       	breq	.+92     	; 0x73a <Endpoint_Write_Control_PStream_LE+0xa8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 6de:	2e b3       	in	r18, 0x1e	; 30
 6e0:	25 30       	cpi	r18, 0x05	; 5
 6e2:	69 f1       	breq	.+90     	; 0x73e <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
 6e4:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsINReady())
 6e8:	20 ff       	sbrs	r18, 0
 6ea:	e5 cf       	rjmp	.-54     	; 0x6b6 <Endpoint_Write_Control_PStream_LE+0x24>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 6ec:	20 91 f2 00 	lds	r18, 0x00F2
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 6f0:	fc 01       	movw	r30, r24
 6f2:	cf 01       	movw	r24, r30
 6f4:	61 15       	cp	r22, r1
 6f6:	71 05       	cpc	r23, r1
 6f8:	51 f0       	breq	.+20     	; 0x70e <Endpoint_Write_Control_PStream_LE+0x7c>
 6fa:	28 30       	cpi	r18, 0x08	; 8
 6fc:	40 f4       	brcc	.+16     	; 0x70e <Endpoint_Write_Control_PStream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 6fe:	84 91       	lpm	r24, Z
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 700:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
 704:	61 50       	subi	r22, 0x01	; 1
 706:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 708:	2f 5f       	subi	r18, 0xFF	; 255
 70a:	31 96       	adiw	r30, 0x01	; 1
 70c:	f2 cf       	rjmp	.-28     	; 0x6f2 <Endpoint_Write_Control_PStream_LE+0x60>
			}
			
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 70e:	31 e0       	ldi	r19, 0x01	; 1
 710:	28 30       	cpi	r18, 0x08	; 8
 712:	09 f0       	breq	.+2      	; 0x716 <Endpoint_Write_Control_PStream_LE+0x84>
 714:	30 e0       	ldi	r19, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 716:	20 91 e8 00 	lds	r18, 0x00E8
 71a:	2e 77       	andi	r18, 0x7E	; 126
 71c:	20 93 e8 00 	sts	0x00E8, r18
 720:	ca cf       	rjmp	.-108    	; 0x6b6 <Endpoint_Write_Control_PStream_LE+0x24>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 722:	31 11       	cpse	r19, r1
 724:	cb cf       	rjmp	.-106    	; 0x6bc <Endpoint_Write_Control_PStream_LE+0x2a>
 726:	d2 cf       	rjmp	.-92     	; 0x6cc <Endpoint_Write_Control_PStream_LE+0x3a>
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 728:	8e b3       	in	r24, 0x1e	; 30
 72a:	88 23       	and	r24, r24
 72c:	31 f0       	breq	.+12     	; 0x73a <Endpoint_Write_Control_PStream_LE+0xa8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 72e:	8e b3       	in	r24, 0x1e	; 30
 730:	85 30       	cpi	r24, 0x05	; 5
 732:	61 f6       	brne	.-104    	; 0x6cc <Endpoint_Write_Control_PStream_LE+0x3a>
 734:	04 c0       	rjmp	.+8      	; 0x73e <Endpoint_Write_Control_PStream_LE+0xac>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 736:	81 e0       	ldi	r24, 0x01	; 1
 738:	08 95       	ret

		if (Endpoint_IsOUTReceived())
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 73a:	82 e0       	ldi	r24, 0x02	; 2
 73c:	08 95       	ret
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 73e:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 740:	08 95       	ret

00000742 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	
	if (!(Length))
 742:	61 15       	cp	r22, r1
 744:	71 05       	cpc	r23, r1
 746:	29 f4       	brne	.+10     	; 0x752 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 748:	20 91 e8 00 	lds	r18, 0x00E8
 74c:	2b 77       	andi	r18, 0x7B	; 123
 74e:	20 93 e8 00 	sts	0x00E8, r18
	  Endpoint_ClearOUT();
	
	while (Length)
 752:	61 15       	cp	r22, r1
 754:	71 05       	cpc	r23, r1
 756:	49 f1       	breq	.+82     	; 0x7aa <Endpoint_Read_Control_Stream_LE+0x68>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 758:	20 91 e8 00 	lds	r18, 0x00E8
	{
		if (Endpoint_IsSETUPReceived())
 75c:	23 fd       	sbrc	r18, 3
 75e:	2a c0       	rjmp	.+84     	; 0x7b4 <Endpoint_Read_Control_Stream_LE+0x72>
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (USB_DeviceState == DEVICE_STATE_Unattached)
 760:	2e b3       	in	r18, 0x1e	; 30
 762:	22 23       	and	r18, r18
 764:	59 f1       	breq	.+86     	; 0x7bc <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 766:	2e b3       	in	r18, 0x1e	; 30
 768:	25 30       	cpi	r18, 0x05	; 5
 76a:	51 f1       	breq	.+84     	; 0x7c0 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 76c:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsOUTReceived())
 770:	22 ff       	sbrs	r18, 2
 772:	f2 cf       	rjmp	.-28     	; 0x758 <Endpoint_Read_Control_Stream_LE+0x16>
 774:	fc 01       	movw	r30, r24
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 776:	80 91 f2 00 	lds	r24, 0x00F2
		{
			while (Length && Endpoint_BytesInEndpoint())
 77a:	88 23       	and	r24, r24
 77c:	71 f0       	breq	.+28     	; 0x79a <Endpoint_Read_Control_Stream_LE+0x58>
 77e:	9f 01       	movw	r18, r30
 780:	2f 5f       	subi	r18, 0xFF	; 255
 782:	3f 4f       	sbci	r19, 0xFF	; 255
 784:	c9 01       	movw	r24, r18
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 786:	40 91 f1 00 	lds	r20, 0x00F1
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 78a:	40 83       	st	Z, r20
				Length--;
 78c:	61 50       	subi	r22, 0x01	; 1
 78e:	71 09       	sbc	r23, r1
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
 790:	61 15       	cp	r22, r1
 792:	71 05       	cpc	r23, r1
 794:	c9 f2       	breq	.-78     	; 0x748 <Endpoint_Read_Control_Stream_LE+0x6>
 796:	f9 01       	movw	r30, r18
 798:	ee cf       	rjmp	.-36     	; 0x776 <Endpoint_Read_Control_Stream_LE+0x34>
 79a:	cf 01       	movw	r24, r30
 79c:	d5 cf       	rjmp	.-86     	; 0x748 <Endpoint_Read_Control_Stream_LE+0x6>
		}		  
	}
	
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 79e:	8e b3       	in	r24, 0x1e	; 30
 7a0:	88 23       	and	r24, r24
 7a2:	61 f0       	breq	.+24     	; 0x7bc <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 7a4:	8e b3       	in	r24, 0x1e	; 30
 7a6:	85 30       	cpi	r24, 0x05	; 5
 7a8:	59 f0       	breq	.+22     	; 0x7c0 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
 7aa:	80 91 e8 00 	lds	r24, 0x00E8
			
			Endpoint_ClearOUT();
		}		  
	}
	
	while (!(Endpoint_IsINReady()))
 7ae:	80 ff       	sbrs	r24, 0
 7b0:	f6 cf       	rjmp	.-20     	; 0x79e <Endpoint_Read_Control_Stream_LE+0x5c>
 7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <Endpoint_Read_Control_Stream_LE+0x76>
	  Endpoint_ClearOUT();
	
	while (Length)
	{
		if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 7b4:	81 e0       	ldi	r24, 0x01	; 1
 7b6:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}
	
	return ENDPOINT_RWCSTREAM_NoError;
 7b8:	80 e0       	ldi	r24, 0x00	; 0
 7ba:	08 95       	ret
	{
		if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 7bc:	82 e0       	ldi	r24, 0x02	; 2
 7be:	08 95       	ret
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 7c0:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}
	
	return ENDPOINT_RWCSTREAM_NoError;
}
 7c2:	08 95       	ret

000007c4 <USB_ResetInterface>:
	#endif
}

void USB_ResetInterface(void)
{
	USB_INT_DisableAllInterrupts();
 7c4:	40 d0       	rcall	.+128    	; 0x846 <USB_INT_DisableAllInterrupts>
 7c6:	42 d0       	rcall	.+132    	; 0x84c <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
 7c8:	1e ba       	out	0x1e, r1	; 30
 7ca:	10 92 d3 01 	sts	0x01D3, r1
	USB_HostState   = HOST_STATE_Unattached;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	USB_DeviceState = DEVICE_STATE_Unattached;
	USB_ConfigurationNumber  = 0;
 7ce:	10 92 d2 01 	sts	0x01D2, r1
	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_RemoteWakeupEnabled  = false;
	#endif
	
	#if !defined(NO_DEVICE_SELF_POWER)
	USB_CurrentlySelfPowered = false;
 7d2:	84 e0       	ldi	r24, 0x04	; 4
 7d4:	89 bd       	out	0x29, r24	; 41
	#if !defined(__DOXYGEN__)
		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 7d6:	89 b5       	in	r24, 0x29	; 41
 7d8:	82 60       	ori	r24, 0x02	; 2
				PLLCSR |= (1 << PLLE);
 7da:	89 bd       	out	0x29, r24	; 41
 7dc:	09 b4       	in	r0, 0x29	; 41
 7de:	00 fe       	sbrs	r0, 0
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
 7e0:	fd cf       	rjmp	.-6      	; 0x7dc <USB_ResetInterface+0x18>
 7e2:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
 7e6:	98 2f       	mov	r25, r24
 7e8:	9f 77       	andi	r25, 0x7F	; 127
				
				USBCON = (Temp & ~(1 << USBE));
 7ea:	90 93 d8 00 	sts	0x00D8, r25
 7ee:	80 68       	ori	r24, 0x80	; 128
 7f0:	80 93 d8 00 	sts	0x00D8, r24
				USBCON = (Temp |  (1 << USBE));
 7f4:	80 91 63 00 	lds	r24, 0x0063
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
			#else
				REGCR   &= ~(1 << REGDIS);
 7f8:	8e 7f       	andi	r24, 0xFE	; 254
 7fa:	80 93 63 00 	sts	0x0063, r24
 7fe:	80 91 d8 00 	lds	r24, 0x00D8
			}
			
			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 802:	8f 7d       	andi	r24, 0xDF	; 223
 804:	80 93 d8 00 	sts	0x00D8, r24
 808:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 80c:	8e 7f       	andi	r24, 0xFE	; 254
 80e:	80 93 e0 00 	sts	0x00E0, r24
 812:	80 91 e1 00 	lds	r24, 0x00E1
	#endif

	USB_Attach();
	
	#if defined(USB_DEVICE_ONLY)
	USB_INT_Clear(USB_INT_SUSPEND);
 816:	8e 7f       	andi	r24, 0xFE	; 254
 818:	80 93 e1 00 	sts	0x00E1, r24
 81c:	80 91 e2 00 	lds	r24, 0x00E2
	USB_INT_Enable(USB_INT_SUSPEND);
 820:	81 60       	ori	r24, 0x01	; 1
 822:	80 93 e2 00 	sts	0x00E2, r24
 826:	80 91 e1 00 	lds	r24, 0x00E1
	USB_INT_Clear(USB_INT_EORSTI);
 82a:	87 7f       	andi	r24, 0xF7	; 247
 82c:	80 93 e1 00 	sts	0x00E1, r24
 830:	80 91 e2 00 	lds	r24, 0x00E2
	USB_INT_Enable(USB_INT_EORSTI);
 834:	88 60       	ori	r24, 0x08	; 8
 836:	80 93 e2 00 	sts	0x00E2, r24
 83a:	08 95       	ret

0000083c <USB_Init>:
 83c:	c3 df       	rcall	.-122    	; 0x7c4 <USB_ResetInterface>
 83e:	81 e0       	ldi	r24, 0x01	; 1

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USB_OTGPAD_On();
	#endif

	USB_IsInitialized = true;
 840:	80 93 d4 01 	sts	0x01D4, r24
 844:	08 95       	ret

00000846 <USB_INT_DisableAllInterrupts>:
	UHIEN   = 0;
	OTGIEN  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 846:	10 92 e2 00 	sts	0x00E2, r1
 84a:	08 95       	ret

0000084c <USB_INT_ClearAllInterrupts>:
	UHINT   = 0;
	OTGINT  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
 84c:	10 92 e1 00 	sts	0x00E1, r1
 850:	08 95       	ret

00000852 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 852:	1f 92       	push	r1
 854:	0f 92       	push	r0
 856:	0f b6       	in	r0, 0x3f	; 63
 858:	0f 92       	push	r0
 85a:	11 24       	eor	r1, r1
 85c:	2f 93       	push	r18
 85e:	3f 93       	push	r19
 860:	4f 93       	push	r20
 862:	5f 93       	push	r21
 864:	6f 93       	push	r22
 866:	7f 93       	push	r23
 868:	8f 93       	push	r24
 86a:	9f 93       	push	r25
 86c:	af 93       	push	r26
 86e:	bf 93       	push	r27
 870:	ef 93       	push	r30
 872:	ff 93       	push	r31
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPEND) && USB_INT_IsEnabled(USB_INT_SUSPEND))
 874:	80 91 e1 00 	lds	r24, 0x00E1
 878:	80 ff       	sbrs	r24, 0
 87a:	1b c0       	rjmp	.+54     	; 0x8b2 <__vector_11+0x60>
 87c:	80 91 e2 00 	lds	r24, 0x00E2
 880:	80 ff       	sbrs	r24, 0
 882:	17 c0       	rjmp	.+46     	; 0x8b2 <__vector_11+0x60>
	{
		USB_INT_Clear(USB_INT_SUSPEND);
 884:	80 91 e1 00 	lds	r24, 0x00E1
 888:	8e 7f       	andi	r24, 0xFE	; 254
 88a:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_SUSPEND);
 88e:	80 91 e2 00 	lds	r24, 0x00E2
 892:	8e 7f       	andi	r24, 0xFE	; 254
 894:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUP);
 898:	80 91 e2 00 	lds	r24, 0x00E2
 89c:	80 61       	ori	r24, 0x10	; 16
 89e:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 8a2:	80 91 d8 00 	lds	r24, 0x00D8
 8a6:	80 62       	ori	r24, 0x20	; 32
 8a8:	80 93 d8 00 	sts	0x00D8, r24
			}
			
			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
 8ac:	19 bc       	out	0x29, r1	; 41
		
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
 8ae:	1e ba       	out	0x1e, r1	; 30
		EVENT_USB_Device_Disconnect();
 8b0:	05 dd       	rcall	.-1526   	; 0x2bc <EVENT_USB_Device_Disconnect>
 8b2:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUP) && USB_INT_IsEnabled(USB_INT_WAKEUP))
 8b6:	84 ff       	sbrs	r24, 4
 8b8:	29 c0       	rjmp	.+82     	; 0x90c <__vector_11+0xba>
 8ba:	80 91 e2 00 	lds	r24, 0x00E2
 8be:	84 ff       	sbrs	r24, 4
 8c0:	25 c0       	rjmp	.+74     	; 0x90c <__vector_11+0xba>
 8c2:	84 e0       	ldi	r24, 0x04	; 4
	#if !defined(__DOXYGEN__)
		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 8c4:	89 bd       	out	0x29, r24	; 41
 8c6:	89 b5       	in	r24, 0x29	; 41
				PLLCSR |= (1 << PLLE);
 8c8:	82 60       	ori	r24, 0x02	; 2
 8ca:	89 bd       	out	0x29, r24	; 41
 8cc:	09 b4       	in	r0, 0x29	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 8ce:	00 fe       	sbrs	r0, 0
 8d0:	fd cf       	rjmp	.-6      	; 0x8cc <__vector_11+0x7a>
 8d2:	80 91 d8 00 	lds	r24, 0x00D8
			}
			
			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 8d6:	8f 7d       	andi	r24, 0xDF	; 223
 8d8:	80 93 d8 00 	sts	0x00D8, r24
 8dc:	80 91 e1 00 	lds	r24, 0x00E1
		}

		USB_CLK_Unfreeze();

		USB_INT_Clear(USB_INT_WAKEUP);
 8e0:	8f 7e       	andi	r24, 0xEF	; 239
 8e2:	80 93 e1 00 	sts	0x00E1, r24
 8e6:	80 91 e2 00 	lds	r24, 0x00E2

		USB_INT_Disable(USB_INT_WAKEUP);
 8ea:	8f 7e       	andi	r24, 0xEF	; 239
 8ec:	80 93 e2 00 	sts	0x00E2, r24
 8f0:	80 91 e2 00 	lds	r24, 0x00E2
		USB_INT_Enable(USB_INT_SUSPEND);
 8f4:	81 60       	ori	r24, 0x01	; 1
 8f6:	80 93 e2 00 	sts	0x00E2, r24
 8fa:	80 91 d3 01 	lds	r24, 0x01D3
		
		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 8fe:	88 23       	and	r24, r24
 900:	11 f0       	breq	.+4      	; 0x906 <__vector_11+0xb4>
 902:	84 e0       	ldi	r24, 0x04	; 4
 904:	01 c0       	rjmp	.+2      	; 0x908 <__vector_11+0xb6>
 906:	81 e0       	ldi	r24, 0x01	; 1
 908:	8e bb       	out	0x1e, r24	; 30
 90a:	d7 dc       	rcall	.-1618   	; 0x2ba <EVENT_USB_Device_Connect>
		EVENT_USB_Device_Connect();
 90c:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
		EVENT_USB_Device_WakeUp();		
		#endif
	}
   
	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 910:	83 ff       	sbrs	r24, 3
 912:	22 c0       	rjmp	.+68     	; 0x958 <__vector_11+0x106>
 914:	80 91 e2 00 	lds	r24, 0x00E2
 918:	83 ff       	sbrs	r24, 3
 91a:	1e c0       	rjmp	.+60     	; 0x958 <__vector_11+0x106>
 91c:	80 91 e1 00 	lds	r24, 0x00E1
	{
		USB_INT_Clear(USB_INT_EORSTI);
 920:	87 7f       	andi	r24, 0xF7	; 247
 922:	80 93 e1 00 	sts	0x00E1, r24
 926:	82 e0       	ldi	r24, 0x02	; 2
 928:	8e bb       	out	0x1e, r24	; 30

		USB_DeviceState         = DEVICE_STATE_Default;
 92a:	10 92 d3 01 	sts	0x01D3, r1
		USB_ConfigurationNumber = 0;
 92e:	80 91 e1 00 	lds	r24, 0x00E1

		USB_INT_Clear(USB_INT_SUSPEND);
 932:	8e 7f       	andi	r24, 0xFE	; 254
 934:	80 93 e1 00 	sts	0x00E1, r24
 938:	80 91 e2 00 	lds	r24, 0x00E2
		USB_INT_Disable(USB_INT_SUSPEND);
 93c:	8e 7f       	andi	r24, 0xFE	; 254
 93e:	80 93 e2 00 	sts	0x00E2, r24
 942:	80 91 e2 00 	lds	r24, 0x00E2
		USB_INT_Enable(USB_INT_WAKEUP);
 946:	80 61       	ori	r24, 0x10	; 16
 948:	80 93 e2 00 	sts	0x00E2, r24
 94c:	bb dd       	rcall	.-1162   	; 0x4c4 <Endpoint_ClearEndpoints>
 94e:	42 e0       	ldi	r20, 0x02	; 2

		Endpoint_ClearEndpoints();
 950:	60 e0       	ldi	r22, 0x00	; 0
 952:	80 e0       	ldi	r24, 0x00	; 0
			                                                    const uint8_t Type,
			                                                    const uint8_t Direction,
			                                                    const uint16_t Size,
			                                                    const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 954:	a4 dd       	rcall	.-1208   	; 0x49e <Endpoint_ConfigureEndpoint_Prv>
 956:	0b d1       	rcall	.+534    	; 0xb6e <USB_Event_Stub>
 958:	80 91 e1 00 	lds	r24, 0x00E1
 95c:	82 ff       	sbrs	r24, 2

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 95e:	0a c0       	rjmp	.+20     	; 0x974 <__vector_11+0x122>
 960:	80 91 e2 00 	lds	r24, 0x00E2
	}
	
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 964:	82 ff       	sbrs	r24, 2
 966:	06 c0       	rjmp	.+12     	; 0x974 <__vector_11+0x122>
 968:	80 91 e1 00 	lds	r24, 0x00E1
 96c:	8b 7f       	andi	r24, 0xFB	; 251
 96e:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);
 972:	b1 dc       	rcall	.-1694   	; 0x2d6 <EVENT_USB_Device_StartOfFrame>
 974:	ff 91       	pop	r31
 976:	ef 91       	pop	r30
 978:	bf 91       	pop	r27
 97a:	af 91       	pop	r26
		
		EVENT_USB_Device_StartOfFrame();
 97c:	9f 91       	pop	r25
 97e:	8f 91       	pop	r24
		EVENT_USB_UIDChange();

		USB_ResetInterface();
	}
	#endif
}
 980:	7f 91       	pop	r23
 982:	6f 91       	pop	r22
 984:	5f 91       	pop	r21
 986:	4f 91       	pop	r20
 988:	3f 91       	pop	r19
 98a:	2f 91       	pop	r18
 98c:	0f 90       	pop	r0
 98e:	0f be       	out	0x3f, r0	; 63
 990:	0f 90       	pop	r0
 992:	1f 90       	pop	r1
 994:	18 95       	reti

00000996 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 996:	1f 93       	push	r17
 998:	cf 93       	push	r28
 99a:	df 93       	push	r29
 99c:	00 d0       	rcall	.+0      	; 0x99e <USB_Device_ProcessControlRequest+0x8>
 99e:	cd b7       	in	r28, 0x3d	; 61
 9a0:	de b7       	in	r29, 0x3e	; 62
 9a2:	e5 ed       	ldi	r30, 0xD5	; 213
 9a4:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 9a6:	80 91 f1 00 	lds	r24, 0x00F1
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
	
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
 9aa:	81 93       	st	Z+, r24
void USB_Device_ProcessControlRequest(void)
{
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
	
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 9ac:	81 e0       	ldi	r24, 0x01	; 1
 9ae:	ed 3d       	cpi	r30, 0xDD	; 221
 9b0:	f8 07       	cpc	r31, r24
 9b2:	c9 f7       	brne	.-14     	; 0x9a6 <USB_Device_ProcessControlRequest+0x10>
	  *(RequestHeader++) = Endpoint_Read_Byte();
	  
	uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 9b4:	20 91 d5 01 	lds	r18, 0x01D5
	
	switch (USB_ControlRequest.bRequest)
 9b8:	30 91 d6 01 	lds	r19, 0x01D6
 9bc:	83 2f       	mov	r24, r19
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	8a 30       	cpi	r24, 0x0A	; 10
 9c2:	91 05       	cpc	r25, r1
 9c4:	08 f0       	brcs	.+2      	; 0x9c8 <USB_Device_ProcessControlRequest+0x32>
 9c6:	cb c0       	rjmp	.+406    	; 0xb5e <USB_Device_ProcessControlRequest+0x1c8>
 9c8:	fc 01       	movw	r30, r24
 9ca:	e6 5c       	subi	r30, 0xC6	; 198
 9cc:	ff 4f       	sbci	r31, 0xFF	; 255
 9ce:	c7 c2       	rjmp	.+1422   	; 0xf5e <__tablejump2__>
 9d0:	20 38       	cpi	r18, 0x80	; 128
	{
		case REQ_GetStatus:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 9d2:	81 f0       	breq	.+32     	; 0x9f4 <USB_Device_ProcessControlRequest+0x5e>
 9d4:	22 38       	cpi	r18, 0x82	; 130
 9d6:	09 f0       	breq	.+2      	; 0x9da <USB_Device_ProcessControlRequest+0x44>
 9d8:	c2 c0       	rjmp	.+388    	; 0xb5e <USB_Device_ProcessControlRequest+0x1c8>
 9da:	80 91 d9 01 	lds	r24, 0x01D9
	#endif
			break;
#endif
#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 9de:	87 70       	andi	r24, 0x07	; 7
 9e0:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 9e4:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 9e8:	95 fb       	bst	r25, 5
 9ea:	99 27       	eor	r25, r25
 9ec:	90 f9       	bld	r25, 0
 9ee:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <USB_Device_ProcessControlRequest+0x62>
 9f4:	90 91 d2 01 	lds	r25, 0x01D2
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 9f8:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9fc:	87 7f       	andi	r24, 0xF7	; 247
 9fe:	80 93 e8 00 	sts	0x00E8, r24
 a02:	90 93 f1 00 	sts	0x00F1, r25
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
 a06:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Word >> 8);
 a0a:	7c c0       	rjmp	.+248    	; 0xb04 <USB_Device_ProcessControlRequest+0x16e>
 a0c:	82 2f       	mov	r24, r18
			}

			break;
		case REQ_ClearFeature:
		case REQ_SetFeature:
			if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a0e:	8d 7f       	andi	r24, 0xFD	; 253
 a10:	09 f0       	breq	.+2      	; 0xa14 <USB_Device_ProcessControlRequest+0x7e>
 a12:	a5 c0       	rjmp	.+330    	; 0xb5e <USB_Device_ProcessControlRequest+0x1c8>
 a14:	22 30       	cpi	r18, 0x02	; 2
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 a16:	09 f0       	breq	.+2      	; 0xa1a <USB_Device_ProcessControlRequest+0x84>
 a18:	93 c0       	rjmp	.+294    	; 0xb40 <USB_Device_ProcessControlRequest+0x1aa>
 a1a:	80 91 d7 01 	lds	r24, 0x01D7
			
			break;			
#endif
#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_ENDPOINT_HALT)
 a1e:	81 11       	cpse	r24, r1
 a20:	24 c0       	rjmp	.+72     	; 0xa6a <USB_Device_ProcessControlRequest+0xd4>
 a22:	20 91 d9 01 	lds	r18, 0x01D9
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 a26:	27 70       	andi	r18, 0x07	; 7
 a28:	09 f4       	brne	.+2      	; 0xa2c <USB_Device_ProcessControlRequest+0x96>
				
				if (EndpointIndex == ENDPOINT_CONTROLEP)
 a2a:	8a c0       	rjmp	.+276    	; 0xb40 <USB_Device_ProcessControlRequest+0x1aa>
 a2c:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a30:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 a34:	80 ff       	sbrs	r24, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (!(Endpoint_IsEnabled()))
 a36:	84 c0       	rjmp	.+264    	; 0xb40 <USB_Device_ProcessControlRequest+0x1aa>
 a38:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 a3c:	33 30       	cpi	r19, 0x03	; 3
				  return;

				if (USB_ControlRequest.bRequest == REQ_SetFeature)
 a3e:	11 f4       	brne	.+4      	; 0xa44 <USB_Device_ProcessControlRequest+0xae>
 a40:	80 62       	ori	r24, 0x20	; 32
 a42:	11 c0       	rjmp	.+34     	; 0xa66 <USB_Device_ProcessControlRequest+0xd0>
 a44:	80 61       	ori	r24, 0x10	; 16
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 a46:	80 93 eb 00 	sts	0x00EB, r24
 a4a:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 a4c:	90 e0       	ldi	r25, 0x00	; 0
 a4e:	02 2e       	mov	r0, r18
 a50:	01 c0       	rjmp	.+2      	; 0xa54 <USB_Device_ProcessControlRequest+0xbe>
 a52:	88 0f       	add	r24, r24
 a54:	0a 94       	dec	r0
 a56:	ea f7       	brpl	.-6      	; 0xa52 <USB_Device_ProcessControlRequest+0xbc>
 a58:	80 93 ea 00 	sts	0x00EA, r24
 a5c:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
 a60:	80 91 eb 00 	lds	r24, 0x00EB
			
			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 a64:	88 60       	ori	r24, 0x08	; 8
 a66:	80 93 eb 00 	sts	0x00EB, r24
 a6a:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a6e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a72:	87 7f       	andi	r24, 0xF7	; 247
 a74:	4a c0       	rjmp	.+148    	; 0xb0a <USB_Device_ProcessControlRequest+0x174>
 a76:	21 11       	cpse	r18, r1
				RequestHandled = true;
			}

			break;
		case REQ_SetAddress:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 a78:	72 c0       	rjmp	.+228    	; 0xb5e <USB_Device_ProcessControlRequest+0x1c8>
 a7a:	10 91 d7 01 	lds	r17, 0x01D7
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 a7e:	80 91 e8 00 	lds	r24, 0x00E8
 a82:	87 7f       	andi	r24, 0xF7	; 247
 a84:	80 93 e8 00 	sts	0x00E8, r24
 a88:	31 dd       	rcall	.-1438   	; 0x4ec <Endpoint_ClearStatusStage>

	Endpoint_ClearSETUP();
	
	Endpoint_ClearStatusStage();
 a8a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
 a8e:	80 fd       	sbrc	r24, 0
 a90:	04 c0       	rjmp	.+8      	; 0xa9a <USB_Device_ProcessControlRequest+0x104>
	
	while (!(Endpoint_IsINReady()))
 a92:	8e b3       	in	r24, 0x1e	; 30
 a94:	81 11       	cpse	r24, r1
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 a96:	f9 cf       	rjmp	.-14     	; 0xa8a <USB_Device_ProcessControlRequest+0xf4>
 a98:	53 c0       	rjmp	.+166    	; 0xb40 <USB_Device_ProcessControlRequest+0x1aa>
 a9a:	81 2f       	mov	r24, r17
 a9c:	8f 77       	andi	r24, 0x7F	; 127
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 a9e:	11 f0       	breq	.+4      	; 0xaa4 <USB_Device_ProcessControlRequest+0x10e>
 aa0:	93 e0       	ldi	r25, 0x03	; 3
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return;
	}

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 aa2:	01 c0       	rjmp	.+2      	; 0xaa6 <USB_Device_ProcessControlRequest+0x110>
 aa4:	92 e0       	ldi	r25, 0x02	; 2
 aa6:	9e bb       	out	0x1e, r25	; 30
 aa8:	80 68       	ori	r24, 0x80	; 128
 aaa:	80 93 e3 00 	sts	0x00E3, r24
			#endif
			
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = ((1 << ADDEN) | (Address & 0x7F));
 aae:	48 c0       	rjmp	.+144    	; 0xb40 <USB_Device_ProcessControlRequest+0x1aa>
 ab0:	20 58       	subi	r18, 0x80	; 128
 ab2:	22 30       	cpi	r18, 0x02	; 2
				RequestHandled = true;
			}

			break;
		case REQ_GetDescriptor:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 ab4:	08 f0       	brcs	.+2      	; 0xab8 <USB_Device_ProcessControlRequest+0x122>
 ab6:	53 c0       	rjmp	.+166    	; 0xb5e <USB_Device_ProcessControlRequest+0x1c8>
 ab8:	ae 01       	movw	r20, r28
 aba:	4f 5f       	subi	r20, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif
	
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 abc:	5f 4f       	sbci	r21, 0xFF	; 255
 abe:	60 91 d9 01 	lds	r22, 0x01D9
 ac2:	80 91 d7 01 	lds	r24, 0x01D7
 ac6:	90 91 d8 01 	lds	r25, 0x01D8
 aca:	98 dc       	rcall	.-1744   	; 0x3fc <CALLBACK_USB_GetDescriptor>
 acc:	00 97       	sbiw	r24, 0x00	; 0
 ace:	c1 f1       	breq	.+112    	; 0xb40 <USB_Device_ProcessControlRequest+0x1aa>
 ad0:	20 91 e8 00 	lds	r18, 0x00E8
 ad4:	27 7f       	andi	r18, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ad6:	20 93 e8 00 	sts	0x00E8, r18
 ada:	bc 01       	movw	r22, r24
 adc:	89 81       	ldd	r24, Y+1	; 0x01
 ade:	9a 81       	ldd	r25, Y+2	; 0x02
	#if defined(USE_RAM_DESCRIPTORS)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);	
 ae0:	d8 dd       	rcall	.-1104   	; 0x692 <Endpoint_Write_Control_PStream_LE>
 ae2:	80 91 e8 00 	lds	r24, 0x00E8
 ae6:	8b 77       	andi	r24, 0x7B	; 123
 ae8:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 aec:	29 c0       	rjmp	.+82     	; 0xb40 <USB_Device_ProcessControlRequest+0x1aa>
 aee:	20 38       	cpi	r18, 0x80	; 128
 af0:	b1 f5       	brne	.+108    	; 0xb5e <USB_Device_ProcessControlRequest+0x1c8>
 af2:	80 91 e8 00 	lds	r24, 0x00E8
				RequestHandled = true;
			}
			
			break;
		case REQ_GetConfiguration:
			if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 af6:	87 7f       	andi	r24, 0xF7	; 247
 af8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 afc:	80 91 d3 01 	lds	r24, 0x01D3
 b00:	80 93 f1 00 	sts	0x00F1, r24

void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_Byte(USB_ConfigurationNumber);
 b04:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 b08:	8e 77       	andi	r24, 0x7E	; 126
 b0a:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 b0e:	ee dc       	rcall	.-1572   	; 0x4ec <Endpoint_ClearStatusStage>
 b10:	17 c0       	rjmp	.+46     	; 0xb40 <USB_Device_ProcessControlRequest+0x1aa>
 b12:	21 11       	cpse	r18, r1
 b14:	24 c0       	rjmp	.+72     	; 0xb5e <USB_Device_ProcessControlRequest+0x1c8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 b16:	90 91 d7 01 	lds	r25, 0x01D7
 b1a:	92 30       	cpi	r25, 0x02	; 2
				RequestHandled = true;
			}

			break;
		case REQ_SetConfiguration:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b1c:	88 f4       	brcc	.+34     	; 0xb40 <USB_Device_ProcessControlRequest+0x1aa>
 b1e:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 b22:	87 7f       	andi	r24, 0xF7	; 247
 b24:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b28:	90 93 d3 01 	sts	0x01D3, r25
 b2c:	df dc       	rcall	.-1602   	; 0x4ec <Endpoint_ClearStatusStage>
 b2e:	80 91 d3 01 	lds	r24, 0x01D3
	}
#endif
	
	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 b32:	88 23       	and	r24, r24
 b34:	11 f0       	breq	.+4      	; 0xb3a <USB_Device_ProcessControlRequest+0x1a4>

	Endpoint_ClearStatusStage();
 b36:	84 e0       	ldi	r24, 0x04	; 4
 b38:	01 c0       	rjmp	.+2      	; 0xb3c <USB_Device_ProcessControlRequest+0x1a6>

	USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
 b3a:	83 e0       	ldi	r24, 0x03	; 3
 b3c:	8e bb       	out	0x1e, r24	; 30
 b3e:	bf db       	rcall	.-2178   	; 0x2be <EVENT_USB_Device_ConfigurationChanged>
 b40:	80 91 e8 00 	lds	r24, 0x00E8
 b44:	83 ff       	sbrs	r24, 3
 b46:	0d c0       	rjmp	.+26     	; 0xb62 <USB_Device_ProcessControlRequest+0x1cc>
 b48:	80 91 eb 00 	lds	r24, 0x00EB

	EVENT_USB_Device_ConfigurationChanged();
 b4c:	80 62       	ori	r24, 0x20	; 32
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b4e:	80 93 eb 00 	sts	0x00EB, r24
	}

	if (!(RequestHandled))
	  EVENT_USB_Device_UnhandledControlRequest();
	  
	if (Endpoint_IsSETUPReceived())
 b52:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 b56:	87 7f       	andi	r24, 0xF7	; 247
 b58:	80 93 e8 00 	sts	0x00E8, r24
 b5c:	02 c0       	rjmp	.+4      	; 0xb62 <USB_Device_ProcessControlRequest+0x1cc>
 b5e:	b8 db       	rcall	.-2192   	; 0x2d0 <EVENT_USB_Device_UnhandledControlRequest>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b60:	ef cf       	rjmp	.-34     	; 0xb40 <USB_Device_ProcessControlRequest+0x1aa>
 b62:	0f 90       	pop	r0
 b64:	0f 90       	pop	r0
 b66:	df 91       	pop	r29
 b68:	cf 91       	pop	r28
 b6a:	1f 91       	pop	r17

			break;
	}

	if (!(RequestHandled))
	  EVENT_USB_Device_UnhandledControlRequest();
 b6c:	08 95       	ret

00000b6e <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 b6e:	08 95       	ret

00000b70 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 b70:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 b72:	8e b3       	in	r24, 0x1e	; 30
 b74:	88 23       	and	r24, r24
 b76:	59 f0       	breq	.+22     	; 0xb8e <USB_USBTask+0x1e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 b78:	c0 91 e9 00 	lds	r28, 0x00E9
 b7c:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 b7e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b82:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();
	
		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 b86:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
 b88:	06 df       	rcall	.-500    	; 0x996 <USB_Device_ProcessControlRequest>
 b8a:	c0 93 e9 00 	sts	0x00E9, r28
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 b8e:	cf 91       	pop	r28
		if (USB_CurrentMode == USB_MODE_DEVICE)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_HOST)
		  USB_HostTask();
	#endif
}
 b90:	08 95       	ret

00000b92 <HID_Device_ProcessControlRequest>:

#define  __INCLUDE_FROM_HID_DRIVER
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
 b92:	8f 92       	push	r8
 b94:	9f 92       	push	r9
 b96:	af 92       	push	r10
 b98:	bf 92       	push	r11
 b9a:	cf 92       	push	r12
 b9c:	df 92       	push	r13
 b9e:	ef 92       	push	r14
 ba0:	ff 92       	push	r15
 ba2:	0f 93       	push	r16
 ba4:	1f 93       	push	r17
 ba6:	cf 93       	push	r28
 ba8:	df 93       	push	r29
 baa:	00 d0       	rcall	.+0      	; 0xbac <HID_Device_ProcessControlRequest+0x1a>
 bac:	1f 92       	push	r1
 bae:	cd b7       	in	r28, 0x3d	; 61
 bb0:	de b7       	in	r29, 0x3e	; 62
 bb2:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
 bb4:	ad b6       	in	r10, 0x3d	; 61
 bb6:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 bb8:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DRIVER
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
 bbc:	83 ff       	sbrs	r24, 3
 bbe:	ee c0       	rjmp	.+476    	; 0xd9c <HID_Device_ProcessControlRequest+0x20a>
	  return;
	  
	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
 bc0:	f7 01       	movw	r30, r14
 bc2:	80 81       	ld	r24, Z
 bc4:	90 e0       	ldi	r25, 0x00	; 0
 bc6:	20 91 d9 01 	lds	r18, 0x01D9
 bca:	30 91 da 01 	lds	r19, 0x01DA
 bce:	28 17       	cp	r18, r24
 bd0:	39 07       	cpc	r19, r25
 bd2:	09 f0       	breq	.+2      	; 0xbd6 <HID_Device_ProcessControlRequest+0x44>
 bd4:	e3 c0       	rjmp	.+454    	; 0xd9c <HID_Device_ProcessControlRequest+0x20a>
	  return;

	switch (USB_ControlRequest.bRequest)
 bd6:	80 91 d6 01 	lds	r24, 0x01D6
 bda:	83 30       	cpi	r24, 0x03	; 3
 bdc:	09 f4       	brne	.+2      	; 0xbe0 <HID_Device_ProcessControlRequest+0x4e>
 bde:	90 c0       	rjmp	.+288    	; 0xd00 <HID_Device_ProcessControlRequest+0x16e>
 be0:	30 f4       	brcc	.+12     	; 0xbee <HID_Device_ProcessControlRequest+0x5c>
 be2:	81 30       	cpi	r24, 0x01	; 1
 be4:	71 f0       	breq	.+28     	; 0xc02 <HID_Device_ProcessControlRequest+0x70>
 be6:	82 30       	cpi	r24, 0x02	; 2
 be8:	09 f4       	brne	.+2      	; 0xbec <HID_Device_ProcessControlRequest+0x5a>
 bea:	c0 c0       	rjmp	.+384    	; 0xd6c <HID_Device_ProcessControlRequest+0x1da>
 bec:	d7 c0       	rjmp	.+430    	; 0xd9c <HID_Device_ProcessControlRequest+0x20a>
 bee:	8a 30       	cpi	r24, 0x0A	; 10
 bf0:	09 f4       	brne	.+2      	; 0xbf4 <HID_Device_ProcessControlRequest+0x62>
 bf2:	a5 c0       	rjmp	.+330    	; 0xd3e <HID_Device_ProcessControlRequest+0x1ac>
 bf4:	8b 30       	cpi	r24, 0x0B	; 11
 bf6:	09 f4       	brne	.+2      	; 0xbfa <HID_Device_ProcessControlRequest+0x68>
 bf8:	90 c0       	rjmp	.+288    	; 0xd1a <HID_Device_ProcessControlRequest+0x188>
 bfa:	89 30       	cpi	r24, 0x09	; 9
 bfc:	09 f0       	breq	.+2      	; 0xc00 <HID_Device_ProcessControlRequest+0x6e>
 bfe:	ce c0       	rjmp	.+412    	; 0xd9c <HID_Device_ProcessControlRequest+0x20a>
 c00:	4c c0       	rjmp	.+152    	; 0xc9a <HID_Device_ProcessControlRequest+0x108>
	{
		case REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 c02:	80 91 d5 01 	lds	r24, 0x01D5
 c06:	81 3a       	cpi	r24, 0xA1	; 161
 c08:	09 f0       	breq	.+2      	; 0xc0c <HID_Device_ProcessControlRequest+0x7a>
 c0a:	c8 c0       	rjmp	.+400    	; 0xd9c <HID_Device_ProcessControlRequest+0x20a>
 c0c:	8d b6       	in	r8, 0x3d	; 61
 c0e:	9e b6       	in	r9, 0x3e	; 62
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c10:	80 91 e8 00 	lds	r24, 0x00E8
 c14:	87 7f       	andi	r24, 0xF7	; 247
 c16:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();	

				uint16_t ReportSize = 0;
 c1a:	1a 82       	std	Y+2, r1	; 0x02
 c1c:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
 c1e:	80 91 d7 01 	lds	r24, 0x01D7
 c22:	10 91 d8 01 	lds	r17, 0x01D8
 c26:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
 c28:	f7 01       	movw	r30, r14
 c2a:	47 81       	ldd	r20, Z+7	; 0x07
 c2c:	50 e0       	ldi	r21, 0x00	; 0
 c2e:	8d b7       	in	r24, 0x3d	; 61
 c30:	9e b7       	in	r25, 0x3e	; 62
 c32:	84 1b       	sub	r24, r20
 c34:	95 0b       	sbc	r25, r21
 c36:	0f b6       	in	r0, 0x3f	; 63
 c38:	f8 94       	cli
 c3a:	9e bf       	out	0x3e, r25	; 62
 c3c:	0f be       	out	0x3f, r0	; 63
 c3e:	8d bf       	out	0x3d, r24	; 61
 c40:	ed b7       	in	r30, 0x3d	; 61
 c42:	fe b7       	in	r31, 0x3e	; 62
 c44:	31 96       	adiw	r30, 0x01	; 1
 c46:	6f 01       	movw	r12, r30

				memset(ReportData, 0, sizeof(ReportData));
 c48:	60 e0       	ldi	r22, 0x00	; 0
 c4a:	70 e0       	ldi	r23, 0x00	; 0
 c4c:	cf 01       	movw	r24, r30
 c4e:	a3 d1       	rcall	.+838    	; 0xf96 <memset>
 c50:	4f ef       	ldi	r20, 0xFF	; 255
			{
				Endpoint_ClearSETUP();	

				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
 c52:	41 0f       	add	r20, r17
 c54:	8e 01       	movw	r16, r28
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
 c56:	0f 5f       	subi	r16, 0xFF	; 255
 c58:	1f 4f       	sbci	r17, 0xFF	; 255
 c5a:	96 01       	movw	r18, r12
 c5c:	be 01       	movw	r22, r28
 c5e:	6d 5f       	subi	r22, 0xFD	; 253
 c60:	7f 4f       	sbci	r23, 0xFF	; 255
 c62:	c7 01       	movw	r24, r14
 c64:	44 db       	rcall	.-2424   	; 0x2ee <CALLBACK_HID_Device_CreateHIDReport>
 c66:	f7 01       	movw	r30, r14
 c68:	85 81       	ldd	r24, Z+5	; 0x05
				
				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
 c6a:	96 81       	ldd	r25, Z+6	; 0x06
 c6c:	00 97       	sbiw	r24, 0x00	; 0
 c6e:	21 f0       	breq	.+8      	; 0xc78 <HID_Device_ProcessControlRequest+0xe6>
 c70:	47 81       	ldd	r20, Z+7	; 0x07
 c72:	50 e0       	ldi	r21, 0x00	; 0
				  memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
 c74:	b6 01       	movw	r22, r12
 c76:	86 d1       	rcall	.+780    	; 0xf84 <memcpy>
 c78:	10 92 e9 00 	sts	0x00E9, r1
 c7c:	69 81       	ldd	r22, Y+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 c7e:	7a 81       	ldd	r23, Y+2	; 0x02
 c80:	c6 01       	movw	r24, r12

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 c82:	b0 dc       	rcall	.-1696   	; 0x5e4 <Endpoint_Write_Control_Stream_LE>
 c84:	80 91 e8 00 	lds	r24, 0x00E8
 c88:	8b 77       	andi	r24, 0x7B	; 123
 c8a:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 c8e:	0f b6       	in	r0, 0x3f	; 63
 c90:	f8 94       	cli
 c92:	9e be       	out	0x3e, r9	; 62
 c94:	0f be       	out	0x3f, r0	; 63
 c96:	8d be       	out	0x3d, r8	; 61
 c98:	81 c0       	rjmp	.+258    	; 0xd9c <HID_Device_ProcessControlRequest+0x20a>
 c9a:	80 91 d5 01 	lds	r24, 0x01D5
 c9e:	81 32       	cpi	r24, 0x21	; 33
 ca0:	09 f0       	breq	.+2      	; 0xca4 <HID_Device_ProcessControlRequest+0x112>
				Endpoint_ClearOUT();
			}
		
			break;
		case REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 ca2:	7c c0       	rjmp	.+248    	; 0xd9c <HID_Device_ProcessControlRequest+0x20a>
 ca4:	80 91 e8 00 	lds	r24, 0x00E8
 ca8:	87 7f       	andi	r24, 0xF7	; 247
 caa:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cae:	00 91 db 01 	lds	r16, 0x01DB
 cb2:	10 91 dc 01 	lds	r17, 0x01DC
			{
				Endpoint_ClearSETUP();
				
				uint16_t ReportSize = USB_ControlRequest.wLength;
 cb6:	90 90 d7 01 	lds	r9, 0x01D7
 cba:	80 90 d8 01 	lds	r8, 0x01D8
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
 cbe:	8d b7       	in	r24, 0x3d	; 61
 cc0:	9e b7       	in	r25, 0x3e	; 62
 cc2:	80 1b       	sub	r24, r16
 cc4:	91 0b       	sbc	r25, r17
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
 cc6:	0f b6       	in	r0, 0x3f	; 63
 cc8:	f8 94       	cli
 cca:	9e bf       	out	0x3e, r25	; 62
 ccc:	0f be       	out	0x3f, r0	; 63
 cce:	8d bf       	out	0x3d, r24	; 61
 cd0:	ed b7       	in	r30, 0x3d	; 61
 cd2:	fe b7       	in	r31, 0x3e	; 62
 cd4:	31 96       	adiw	r30, 0x01	; 1
 cd6:	6f 01       	movw	r12, r30
 cd8:	b8 01       	movw	r22, r16
 cda:	cf 01       	movw	r24, r30
 cdc:	32 dd       	rcall	.-1436   	; 0x742 <Endpoint_Read_Control_Stream_LE>
 cde:	4f ef       	ldi	r20, 0xFF	; 255

				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
 ce0:	48 0d       	add	r20, r8
 ce2:	96 01       	movw	r18, r12
 ce4:	69 2d       	mov	r22, r9
 ce6:	c7 01       	movw	r24, r14
			{
				Endpoint_ClearSETUP();
				
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
 ce8:	4a db       	rcall	.-2412   	; 0x37e <CALLBACK_HID_Device_ProcessHIDReport>
 cea:	80 91 e8 00 	lds	r24, 0x00E8
				uint8_t  ReportData[ReportSize];

				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType, ReportData, ReportSize);
 cee:	8e 77       	andi	r24, 0x7E	; 126
 cf0:	80 93 e8 00 	sts	0x00E8, r24
 cf4:	0f b6       	in	r0, 0x3f	; 63
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 cf6:	f8 94       	cli
 cf8:	be be       	out	0x3e, r11	; 62
 cfa:	0f be       	out	0x3f, r0	; 63
 cfc:	ad be       	out	0x3d, r10	; 61
 cfe:	4e c0       	rjmp	.+156    	; 0xd9c <HID_Device_ProcessControlRequest+0x20a>
 d00:	80 91 d5 01 	lds	r24, 0x01D5
 d04:	81 3a       	cpi	r24, 0xA1	; 161
 d06:	09 f0       	breq	.+2      	; 0xd0a <HID_Device_ProcessControlRequest+0x178>
 d08:	49 c0       	rjmp	.+146    	; 0xd9c <HID_Device_ProcessControlRequest+0x20a>
 d0a:	80 91 e8 00 	lds	r24, 0x00E8
				Endpoint_ClearIN();				
			}
			
			break;
		case REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 d0e:	87 7f       	andi	r24, 0xF7	; 247
 d10:	80 93 e8 00 	sts	0x00E8, r24
 d14:	f7 01       	movw	r30, r14
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d16:	80 85       	ldd	r24, Z+8	; 0x08
 d18:	39 c0       	rjmp	.+114    	; 0xd8c <HID_Device_ProcessControlRequest+0x1fa>
 d1a:	80 91 d5 01 	lds	r24, 0x01D5
 d1e:	81 32       	cpi	r24, 0x21	; 33
			{
				Endpoint_ClearSETUP();

				Endpoint_Write_Byte(HIDInterfaceInfo->State.UsingReportProtocol);
 d20:	e9 f5       	brne	.+122    	; 0xd9c <HID_Device_ProcessControlRequest+0x20a>
 d22:	80 91 e8 00 	lds	r24, 0x00E8
				Endpoint_ClearStatusStage();
			}
			
			break;
		case REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 d26:	87 7f       	andi	r24, 0xF7	; 247
 d28:	80 93 e8 00 	sts	0x00E8, r24
 d2c:	90 91 d7 01 	lds	r25, 0x01D7
 d30:	81 e0       	ldi	r24, 0x01	; 1
 d32:	91 11       	cpse	r25, r1
 d34:	01 c0       	rjmp	.+2      	; 0xd38 <HID_Device_ProcessControlRequest+0x1a6>
 d36:	80 e0       	ldi	r24, 0x00	; 0
			{
				Endpoint_ClearSETUP();

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
 d38:	f7 01       	movw	r30, r14
 d3a:	80 87       	std	Z+8, r24	; 0x08
 d3c:	2e c0       	rjmp	.+92     	; 0xd9a <HID_Device_ProcessControlRequest+0x208>
 d3e:	80 91 d5 01 	lds	r24, 0x01D5
 d42:	81 32       	cpi	r24, 0x21	; 33
 d44:	59 f5       	brne	.+86     	; 0xd9c <HID_Device_ProcessControlRequest+0x20a>
 d46:	80 91 e8 00 	lds	r24, 0x00E8
				Endpoint_ClearStatusStage();
			}
			
			break;
		case REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 d4a:	87 7f       	andi	r24, 0xF7	; 247
 d4c:	80 93 e8 00 	sts	0x00E8, r24
 d50:	80 91 d7 01 	lds	r24, 0x01D7
 d54:	90 91 d8 01 	lds	r25, 0x01D8
 d58:	88 27       	eor	r24, r24
 d5a:	36 e0       	ldi	r19, 0x06	; 6
			{
				Endpoint_ClearSETUP();
					
				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
 d5c:	96 95       	lsr	r25
 d5e:	87 95       	ror	r24
 d60:	3a 95       	dec	r19
 d62:	e1 f7       	brne	.-8      	; 0xd5c <HID_Device_ProcessControlRequest+0x1ca>
 d64:	f7 01       	movw	r30, r14
 d66:	92 87       	std	Z+10, r25	; 0x0a
 d68:	81 87       	std	Z+9, r24	; 0x09
 d6a:	17 c0       	rjmp	.+46     	; 0xd9a <HID_Device_ProcessControlRequest+0x208>
 d6c:	80 91 d5 01 	lds	r24, 0x01D5
 d70:	81 3a       	cpi	r24, 0xA1	; 161
 d72:	a1 f4       	brne	.+40     	; 0xd9c <HID_Device_ProcessControlRequest+0x20a>
 d74:	80 91 e8 00 	lds	r24, 0x00E8
				Endpoint_ClearStatusStage();
			}
			
			break;
		case REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 d78:	87 7f       	andi	r24, 0xF7	; 247
 d7a:	80 93 e8 00 	sts	0x00E8, r24
 d7e:	f7 01       	movw	r30, r14
 d80:	81 85       	ldd	r24, Z+9	; 0x09
 d82:	92 85       	ldd	r25, Z+10	; 0x0a
 d84:	96 95       	lsr	r25
 d86:	87 95       	ror	r24
 d88:	96 95       	lsr	r25
			{		
				Endpoint_ClearSETUP();
				
				Endpoint_Write_Byte(HIDInterfaceInfo->State.IdleCount >> 2);
 d8a:	87 95       	ror	r24
 d8c:	80 93 f1 00 	sts	0x00F1, r24
 d90:	80 91 e8 00 	lds	r24, 0x00E8
 d94:	8e 77       	andi	r24, 0x7E	; 126
 d96:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 d9a:	a8 db       	rcall	.-2224   	; 0x4ec <Endpoint_ClearStatusStage>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d9c:	0f b6       	in	r0, 0x3f	; 63
 d9e:	f8 94       	cli
 da0:	be be       	out	0x3e, r11	; 62
 da2:	0f be       	out	0x3f, r0	; 63
 da4:	ad be       	out	0x3d, r10	; 61
				Endpoint_ClearIN();

				Endpoint_ClearStatusStage();
 da6:	0f 90       	pop	r0
 da8:	0f 90       	pop	r0
			}

			break;
	}
}
 daa:	0f 90       	pop	r0
 dac:	df 91       	pop	r29
 dae:	cf 91       	pop	r28
 db0:	1f 91       	pop	r17
 db2:	0f 91       	pop	r16
 db4:	ff 90       	pop	r15
 db6:	ef 90       	pop	r14
 db8:	df 90       	pop	r13
 dba:	cf 90       	pop	r12
 dbc:	bf 90       	pop	r11
 dbe:	af 90       	pop	r10
 dc0:	9f 90       	pop	r9
 dc2:	8f 90       	pop	r8
 dc4:	08 95       	ret

00000dc6 <HID_Device_ConfigureEndpoints>:
 dc6:	cf 93       	push	r28
 dc8:	df 93       	push	r29
 dca:	fc 01       	movw	r30, r24
 dcc:	dc 01       	movw	r26, r24
 dce:	18 96       	adiw	r26, 0x08	; 8
 dd0:	85 e0       	ldi	r24, 0x05	; 5
 dd2:	ed 01       	movw	r28, r26

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
 dd4:	19 92       	st	Y+, r1
 dd6:	8a 95       	dec	r24
 dd8:	e9 f7       	brne	.-6      	; 0xdd4 <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
 dda:	81 e0       	ldi	r24, 0x01	; 1
 ddc:	80 87       	std	Z+8, r24	; 0x08
	HIDInterfaceInfo->State.IdleCount = 500;
 dde:	84 ef       	ldi	r24, 0xF4	; 244
 de0:	91 e0       	ldi	r25, 0x01	; 1
 de2:	92 87       	std	Z+10, r25	; 0x0a
 de4:	81 87       	std	Z+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber, EP_TYPE_INTERRUPT,
 de6:	22 81       	ldd	r18, Z+2	; 0x02
 de8:	33 81       	ldd	r19, Z+3	; 0x03
 dea:	84 81       	ldd	r24, Z+4	; 0x04
 dec:	88 23       	and	r24, r24
 dee:	11 f0       	breq	.+4      	; 0xdf4 <HID_Device_ConfigureEndpoints+0x2e>
 df0:	c4 e0       	ldi	r28, 0x04	; 4
 df2:	01 c0       	rjmp	.+2      	; 0xdf6 <HID_Device_ConfigureEndpoints+0x30>
 df4:	c0 e0       	ldi	r28, 0x00	; 0
 df6:	d1 81       	ldd	r29, Z+1	; 0x01
			                                                     const uint8_t Direction,
			                                                     const uint16_t Size,
			                                                     const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMaskDynamic(Size)));
 df8:	c9 01       	movw	r24, r18
 dfa:	43 db       	rcall	.-2426   	; 0x482 <Endpoint_BytesToEPSizeMaskDynamic>
 dfc:	4c 2f       	mov	r20, r28
			                                                     const uint8_t Type,
			                                                     const uint8_t Direction,
			                                                     const uint16_t Size,
			                                                     const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 dfe:	48 2b       	or	r20, r24
 e00:	42 60       	ori	r20, 0x02	; 2
 e02:	61 ec       	ldi	r22, 0xC1	; 193
 e04:	8d 2f       	mov	r24, r29
 e06:	df 91       	pop	r29
	{
		return false;
	}
	
	return true;
}
 e08:	cf 91       	pop	r28
 e0a:	49 cb       	rjmp	.-2414   	; 0x49e <Endpoint_ConfigureEndpoint_Prv>

00000e0c <HID_Device_USBTask>:
 e0c:	5f 92       	push	r5
 e0e:	6f 92       	push	r6
		
void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
 e10:	7f 92       	push	r7
 e12:	8f 92       	push	r8
 e14:	9f 92       	push	r9
 e16:	af 92       	push	r10
 e18:	bf 92       	push	r11
 e1a:	cf 92       	push	r12
 e1c:	df 92       	push	r13
 e1e:	ef 92       	push	r14
 e20:	ff 92       	push	r15
 e22:	0f 93       	push	r16
 e24:	1f 93       	push	r17
 e26:	cf 93       	push	r28
 e28:	df 93       	push	r29
 e2a:	00 d0       	rcall	.+0      	; 0xe2c <HID_Device_USBTask+0x20>
 e2c:	1f 92       	push	r1
 e2e:	cd b7       	in	r28, 0x3d	; 61
 e30:	de b7       	in	r29, 0x3e	; 62
 e32:	7c 01       	movw	r14, r24
			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NO_STREAM_CALLBACK);
			
			Endpoint_ClearIN();
		}
	}
}
 e34:	ad b6       	in	r10, 0x3d	; 61
 e36:	be b6       	in	r11, 0x3e	; 62
	return true;
}
		
void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 e38:	8e b3       	in	r24, 0x1e	; 30
 e3a:	84 30       	cpi	r24, 0x04	; 4
 e3c:	09 f0       	breq	.+2      	; 0xe40 <HID_Device_USBTask+0x34>
 e3e:	77 c0       	rjmp	.+238    	; 0xf2e <HID_Device_USBTask+0x122>
	  return;

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
 e40:	f7 01       	movw	r30, r14
 e42:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 e44:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 e48:	80 91 e8 00 	lds	r24, 0x00E8
	
	if (Endpoint_IsReadWriteAllowed())
 e4c:	85 ff       	sbrs	r24, 5
 e4e:	6f c0       	rjmp	.+222    	; 0xf2e <HID_Device_USBTask+0x122>
 e50:	8d b6       	in	r8, 0x3d	; 61
 e52:	9e b6       	in	r9, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
 e54:	47 81       	ldd	r20, Z+7	; 0x07
 e56:	50 e0       	ldi	r21, 0x00	; 0
 e58:	8d b7       	in	r24, 0x3d	; 61
 e5a:	9e b7       	in	r25, 0x3e	; 62
 e5c:	84 1b       	sub	r24, r20
 e5e:	95 0b       	sbc	r25, r21
 e60:	0f b6       	in	r0, 0x3f	; 63
 e62:	f8 94       	cli
 e64:	9e bf       	out	0x3e, r25	; 62
 e66:	0f be       	out	0x3f, r0	; 63
 e68:	8d bf       	out	0x3d, r24	; 61
 e6a:	ed b7       	in	r30, 0x3d	; 61
 e6c:	fe b7       	in	r31, 0x3e	; 62
 e6e:	31 96       	adiw	r30, 0x01	; 1
 e70:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
 e72:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
 e74:	1a 82       	std	Y+2, r1	; 0x02
 e76:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
 e78:	60 e0       	ldi	r22, 0x00	; 0
 e7a:	70 e0       	ldi	r23, 0x00	; 0
 e7c:	cf 01       	movw	r24, r30
 e7e:	8b d0       	rcall	.+278    	; 0xf96 <memset>
 e80:	8e 01       	movw	r16, r28

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, REPORT_ITEM_TYPE_In,
 e82:	0f 5f       	subi	r16, 0xFF	; 255
 e84:	1f 4f       	sbci	r17, 0xFF	; 255
 e86:	96 01       	movw	r18, r12
 e88:	40 e0       	ldi	r20, 0x00	; 0
 e8a:	be 01       	movw	r22, r28
 e8c:	6d 5f       	subi	r22, 0xFD	; 253
 e8e:	7f 4f       	sbci	r23, 0xFF	; 255
 e90:	c7 01       	movw	r24, r14
 e92:	2d da       	rcall	.-2982   	; 0x2ee <CALLBACK_HID_Device_CreateHIDReport>
 e94:	68 2e       	mov	r6, r24
 e96:	f7 01       	movw	r30, r14
 e98:	81 85       	ldd	r24, Z+9	; 0x09
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
 e9a:	92 85       	ldd	r25, Z+10	; 0x0a
 e9c:	89 2b       	or	r24, r25
 e9e:	41 f0       	breq	.+16     	; 0xeb0 <HID_Device_USBTask+0xa4>
 ea0:	21 e0       	ldi	r18, 0x01	; 1
 ea2:	83 85       	ldd	r24, Z+11	; 0x0b
 ea4:	94 85       	ldd	r25, Z+12	; 0x0c
 ea6:	89 2b       	or	r24, r25
 ea8:	09 f0       	breq	.+2      	; 0xeac <HID_Device_USBTask+0xa0>
 eaa:	20 e0       	ldi	r18, 0x00	; 0
 eac:	72 2e       	mov	r7, r18
 eae:	01 c0       	rjmp	.+2      	; 0xeb2 <HID_Device_USBTask+0xa6>
 eb0:	71 2c       	mov	r7, r1
 eb2:	f7 01       	movw	r30, r14
 eb4:	05 81       	ldd	r16, Z+5	; 0x05
		
		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
 eb6:	16 81       	ldd	r17, Z+6	; 0x06
 eb8:	01 15       	cp	r16, r1
 eba:	11 05       	cpc	r17, r1
 ebc:	89 f0       	breq	.+34     	; 0xee0 <HID_Device_USBTask+0xd4>
 ebe:	49 81       	ldd	r20, Y+1	; 0x01
 ec0:	5a 81       	ldd	r21, Y+2	; 0x02
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
 ec2:	b8 01       	movw	r22, r16
 ec4:	c6 01       	movw	r24, r12
 ec6:	51 d0       	rcall	.+162    	; 0xf6a <memcmp>
 ec8:	55 24       	eor	r5, r5
 eca:	53 94       	inc	r5
 ecc:	89 2b       	or	r24, r25
 ece:	09 f4       	brne	.+2      	; 0xed2 <HID_Device_USBTask+0xc6>
 ed0:	51 2c       	mov	r5, r1
 ed2:	f7 01       	movw	r30, r14
 ed4:	47 81       	ldd	r20, Z+7	; 0x07
 ed6:	50 e0       	ldi	r21, 0x00	; 0
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
 ed8:	b6 01       	movw	r22, r12
 eda:	c8 01       	movw	r24, r16
 edc:	53 d0       	rcall	.+166    	; 0xf84 <memcpy>
 ede:	01 c0       	rjmp	.+2      	; 0xee2 <HID_Device_USBTask+0xd6>
 ee0:	51 2c       	mov	r5, r1
 ee2:	29 81       	ldd	r18, Y+1	; 0x01
 ee4:	3a 81       	ldd	r19, Y+2	; 0x02
 ee6:	23 2b       	or	r18, r19

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, REPORT_ITEM_TYPE_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
 ee8:	e9 f0       	breq	.+58     	; 0xf24 <HID_Device_USBTask+0x118>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
 eea:	61 10       	cpse	r6, r1
 eec:	04 c0       	rjmp	.+8      	; 0xef6 <HID_Device_USBTask+0xea>
 eee:	51 10       	cpse	r5, r1
 ef0:	02 c0       	rjmp	.+4      	; 0xef6 <HID_Device_USBTask+0xea>
 ef2:	70 fe       	sbrs	r7, 0
 ef4:	17 c0       	rjmp	.+46     	; 0xf24 <HID_Device_USBTask+0x118>
 ef6:	f7 01       	movw	r30, r14
 ef8:	81 85       	ldd	r24, Z+9	; 0x09
 efa:	92 85       	ldd	r25, Z+10	; 0x0a
 efc:	94 87       	std	Z+12, r25	; 0x0c
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
 efe:	83 87       	std	Z+11, r24	; 0x0b
 f00:	81 81       	ldd	r24, Z+1	; 0x01
 f02:	80 93 e9 00 	sts	0x00E9, r24
 f06:	8b 81       	ldd	r24, Y+3	; 0x03

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
 f08:	81 11       	cpse	r24, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 f0a:	80 93 f1 00 	sts	0x00F1, r24

			if (ReportID)
 f0e:	69 81       	ldd	r22, Y+1	; 0x01
 f10:	7a 81       	ldd	r23, Y+2	; 0x02
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 f12:	40 e0       	ldi	r20, 0x00	; 0
 f14:	50 e0       	ldi	r21, 0x00	; 0
			  Endpoint_Write_Byte(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NO_STREAM_CALLBACK);
 f16:	c6 01       	movw	r24, r12
 f18:	35 db       	rcall	.-2454   	; 0x584 <Endpoint_Write_Stream_LE>
 f1a:	80 91 e8 00 	lds	r24, 0x00E8
 f1e:	8e 77       	andi	r24, 0x7E	; 126
 f20:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 f24:	0f b6       	in	r0, 0x3f	; 63
 f26:	f8 94       	cli
 f28:	9e be       	out	0x3e, r9	; 62
 f2a:	0f be       	out	0x3f, r0	; 63
 f2c:	8d be       	out	0x3d, r8	; 61
 f2e:	0f b6       	in	r0, 0x3f	; 63
 f30:	f8 94       	cli
 f32:	be be       	out	0x3e, r11	; 62
 f34:	0f be       	out	0x3f, r0	; 63
 f36:	ad be       	out	0x3d, r10	; 61
			
			Endpoint_ClearIN();
		}
	}
}
 f38:	0f 90       	pop	r0
 f3a:	0f 90       	pop	r0
 f3c:	0f 90       	pop	r0
 f3e:	df 91       	pop	r29
 f40:	cf 91       	pop	r28
 f42:	1f 91       	pop	r17
 f44:	0f 91       	pop	r16
 f46:	ff 90       	pop	r15
 f48:	ef 90       	pop	r14
 f4a:	df 90       	pop	r13
 f4c:	cf 90       	pop	r12
 f4e:	bf 90       	pop	r11
 f50:	af 90       	pop	r10
 f52:	9f 90       	pop	r9
 f54:	8f 90       	pop	r8
 f56:	7f 90       	pop	r7
 f58:	6f 90       	pop	r6
 f5a:	5f 90       	pop	r5
 f5c:	08 95       	ret

00000f5e <__tablejump2__>:
 f5e:	ee 0f       	add	r30, r30
 f60:	ff 1f       	adc	r31, r31

00000f62 <__tablejump__>:
 f62:	05 90       	lpm	r0, Z+
 f64:	f4 91       	lpm	r31, Z
 f66:	e0 2d       	mov	r30, r0
 f68:	09 94       	ijmp

00000f6a <memcmp>:
 f6a:	fb 01       	movw	r30, r22
 f6c:	dc 01       	movw	r26, r24
 f6e:	04 c0       	rjmp	.+8      	; 0xf78 <memcmp+0xe>
 f70:	8d 91       	ld	r24, X+
 f72:	01 90       	ld	r0, Z+
 f74:	80 19       	sub	r24, r0
 f76:	21 f4       	brne	.+8      	; 0xf80 <memcmp+0x16>
 f78:	41 50       	subi	r20, 0x01	; 1
 f7a:	50 40       	sbci	r21, 0x00	; 0
 f7c:	c8 f7       	brcc	.-14     	; 0xf70 <memcmp+0x6>
 f7e:	88 1b       	sub	r24, r24
 f80:	99 0b       	sbc	r25, r25
 f82:	08 95       	ret

00000f84 <memcpy>:
 f84:	fb 01       	movw	r30, r22
 f86:	dc 01       	movw	r26, r24
 f88:	02 c0       	rjmp	.+4      	; 0xf8e <memcpy+0xa>
 f8a:	01 90       	ld	r0, Z+
 f8c:	0d 92       	st	X+, r0
 f8e:	41 50       	subi	r20, 0x01	; 1
 f90:	50 40       	sbci	r21, 0x00	; 0
 f92:	d8 f7       	brcc	.-10     	; 0xf8a <memcpy+0x6>
 f94:	08 95       	ret

00000f96 <memset>:
 f96:	dc 01       	movw	r26, r24
 f98:	01 c0       	rjmp	.+2      	; 0xf9c <memset+0x6>
 f9a:	6d 93       	st	X+, r22
 f9c:	41 50       	subi	r20, 0x01	; 1
 f9e:	50 40       	sbci	r21, 0x00	; 0
 fa0:	e0 f7       	brcc	.-8      	; 0xf9a <memset+0x4>
 fa2:	08 95       	ret

00000fa4 <_exit>:
 fa4:	f8 94       	cli

00000fa6 <__stop_program>:
 fa6:	ff cf       	rjmp	.-2      	; 0xfa6 <__stop_program>
